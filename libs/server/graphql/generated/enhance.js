"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Task: crudResolvers.TaskCrudResolver,
    Subtask: crudResolvers.SubtaskCrudResolver,
    TaskDependency: crudResolvers.TaskDependencyCrudResolver,
    TaskMasterMetadata: crudResolvers.TaskMasterMetadataCrudResolver,
    SyncOperation: crudResolvers.SyncOperationCrudResolver,
    SyncConflict: crudResolvers.SyncConflictCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Project: crudResolvers.ProjectCrudResolver,
    Label: crudResolvers.LabelCrudResolver,
    IssueStatus: crudResolvers.IssueStatusCrudResolver,
    IssuePriority: crudResolvers.IssuePriorityCrudResolver,
    Issue: crudResolvers.IssueCrudResolver,
    IssueLabel: crudResolvers.IssueLabelCrudResolver,
    Cycle: crudResolvers.CycleCrudResolver,
    Team: crudResolvers.TeamCrudResolver,
    TeamMember: crudResolvers.TeamMemberCrudResolver,
    TeamProject: crudResolvers.TeamProjectCrudResolver
};
const actionResolversMap = {
    Task: {
        aggregateTask: actionResolvers.AggregateTaskResolver,
        createManyTask: actionResolvers.CreateManyTaskResolver,
        createManyAndReturnTask: actionResolvers.CreateManyAndReturnTaskResolver,
        createOneTask: actionResolvers.CreateOneTaskResolver,
        deleteManyTask: actionResolvers.DeleteManyTaskResolver,
        deleteOneTask: actionResolvers.DeleteOneTaskResolver,
        findFirstTask: actionResolvers.FindFirstTaskResolver,
        findFirstTaskOrThrow: actionResolvers.FindFirstTaskOrThrowResolver,
        tasks: actionResolvers.FindManyTaskResolver,
        task: actionResolvers.FindUniqueTaskResolver,
        getTask: actionResolvers.FindUniqueTaskOrThrowResolver,
        groupByTask: actionResolvers.GroupByTaskResolver,
        updateManyTask: actionResolvers.UpdateManyTaskResolver,
        updateOneTask: actionResolvers.UpdateOneTaskResolver,
        upsertOneTask: actionResolvers.UpsertOneTaskResolver
    },
    Subtask: {
        aggregateSubtask: actionResolvers.AggregateSubtaskResolver,
        createManySubtask: actionResolvers.CreateManySubtaskResolver,
        createManyAndReturnSubtask: actionResolvers.CreateManyAndReturnSubtaskResolver,
        createOneSubtask: actionResolvers.CreateOneSubtaskResolver,
        deleteManySubtask: actionResolvers.DeleteManySubtaskResolver,
        deleteOneSubtask: actionResolvers.DeleteOneSubtaskResolver,
        findFirstSubtask: actionResolvers.FindFirstSubtaskResolver,
        findFirstSubtaskOrThrow: actionResolvers.FindFirstSubtaskOrThrowResolver,
        subtasks: actionResolvers.FindManySubtaskResolver,
        subtask: actionResolvers.FindUniqueSubtaskResolver,
        getSubtask: actionResolvers.FindUniqueSubtaskOrThrowResolver,
        groupBySubtask: actionResolvers.GroupBySubtaskResolver,
        updateManySubtask: actionResolvers.UpdateManySubtaskResolver,
        updateOneSubtask: actionResolvers.UpdateOneSubtaskResolver,
        upsertOneSubtask: actionResolvers.UpsertOneSubtaskResolver
    },
    TaskDependency: {
        aggregateTaskDependency: actionResolvers.AggregateTaskDependencyResolver,
        createManyTaskDependency: actionResolvers.CreateManyTaskDependencyResolver,
        createManyAndReturnTaskDependency: actionResolvers.CreateManyAndReturnTaskDependencyResolver,
        createOneTaskDependency: actionResolvers.CreateOneTaskDependencyResolver,
        deleteManyTaskDependency: actionResolvers.DeleteManyTaskDependencyResolver,
        deleteOneTaskDependency: actionResolvers.DeleteOneTaskDependencyResolver,
        findFirstTaskDependency: actionResolvers.FindFirstTaskDependencyResolver,
        findFirstTaskDependencyOrThrow: actionResolvers.FindFirstTaskDependencyOrThrowResolver,
        taskDependencies: actionResolvers.FindManyTaskDependencyResolver,
        taskDependency: actionResolvers.FindUniqueTaskDependencyResolver,
        getTaskDependency: actionResolvers.FindUniqueTaskDependencyOrThrowResolver,
        groupByTaskDependency: actionResolvers.GroupByTaskDependencyResolver,
        updateManyTaskDependency: actionResolvers.UpdateManyTaskDependencyResolver,
        updateOneTaskDependency: actionResolvers.UpdateOneTaskDependencyResolver,
        upsertOneTaskDependency: actionResolvers.UpsertOneTaskDependencyResolver
    },
    TaskMasterMetadata: {
        aggregateTaskMasterMetadata: actionResolvers.AggregateTaskMasterMetadataResolver,
        createManyTaskMasterMetadata: actionResolvers.CreateManyTaskMasterMetadataResolver,
        createManyAndReturnTaskMasterMetadata: actionResolvers.CreateManyAndReturnTaskMasterMetadataResolver,
        createOneTaskMasterMetadata: actionResolvers.CreateOneTaskMasterMetadataResolver,
        deleteManyTaskMasterMetadata: actionResolvers.DeleteManyTaskMasterMetadataResolver,
        deleteOneTaskMasterMetadata: actionResolvers.DeleteOneTaskMasterMetadataResolver,
        findFirstTaskMasterMetadata: actionResolvers.FindFirstTaskMasterMetadataResolver,
        findFirstTaskMasterMetadataOrThrow: actionResolvers.FindFirstTaskMasterMetadataOrThrowResolver,
        findManyTaskMasterMetadata: actionResolvers.FindManyTaskMasterMetadataResolver,
        findUniqueTaskMasterMetadata: actionResolvers.FindUniqueTaskMasterMetadataResolver,
        findUniqueTaskMasterMetadataOrThrow: actionResolvers.FindUniqueTaskMasterMetadataOrThrowResolver,
        groupByTaskMasterMetadata: actionResolvers.GroupByTaskMasterMetadataResolver,
        updateManyTaskMasterMetadata: actionResolvers.UpdateManyTaskMasterMetadataResolver,
        updateOneTaskMasterMetadata: actionResolvers.UpdateOneTaskMasterMetadataResolver,
        upsertOneTaskMasterMetadata: actionResolvers.UpsertOneTaskMasterMetadataResolver
    },
    SyncOperation: {
        aggregateSyncOperation: actionResolvers.AggregateSyncOperationResolver,
        createManySyncOperation: actionResolvers.CreateManySyncOperationResolver,
        createManyAndReturnSyncOperation: actionResolvers.CreateManyAndReturnSyncOperationResolver,
        createOneSyncOperation: actionResolvers.CreateOneSyncOperationResolver,
        deleteManySyncOperation: actionResolvers.DeleteManySyncOperationResolver,
        deleteOneSyncOperation: actionResolvers.DeleteOneSyncOperationResolver,
        findFirstSyncOperation: actionResolvers.FindFirstSyncOperationResolver,
        findFirstSyncOperationOrThrow: actionResolvers.FindFirstSyncOperationOrThrowResolver,
        syncOperations: actionResolvers.FindManySyncOperationResolver,
        syncOperation: actionResolvers.FindUniqueSyncOperationResolver,
        getSyncOperation: actionResolvers.FindUniqueSyncOperationOrThrowResolver,
        groupBySyncOperation: actionResolvers.GroupBySyncOperationResolver,
        updateManySyncOperation: actionResolvers.UpdateManySyncOperationResolver,
        updateOneSyncOperation: actionResolvers.UpdateOneSyncOperationResolver,
        upsertOneSyncOperation: actionResolvers.UpsertOneSyncOperationResolver
    },
    SyncConflict: {
        aggregateSyncConflict: actionResolvers.AggregateSyncConflictResolver,
        createManySyncConflict: actionResolvers.CreateManySyncConflictResolver,
        createManyAndReturnSyncConflict: actionResolvers.CreateManyAndReturnSyncConflictResolver,
        createOneSyncConflict: actionResolvers.CreateOneSyncConflictResolver,
        deleteManySyncConflict: actionResolvers.DeleteManySyncConflictResolver,
        deleteOneSyncConflict: actionResolvers.DeleteOneSyncConflictResolver,
        findFirstSyncConflict: actionResolvers.FindFirstSyncConflictResolver,
        findFirstSyncConflictOrThrow: actionResolvers.FindFirstSyncConflictOrThrowResolver,
        syncConflicts: actionResolvers.FindManySyncConflictResolver,
        syncConflict: actionResolvers.FindUniqueSyncConflictResolver,
        getSyncConflict: actionResolvers.FindUniqueSyncConflictOrThrowResolver,
        groupBySyncConflict: actionResolvers.GroupBySyncConflictResolver,
        updateManySyncConflict: actionResolvers.UpdateManySyncConflictResolver,
        updateOneSyncConflict: actionResolvers.UpdateOneSyncConflictResolver,
        upsertOneSyncConflict: actionResolvers.UpsertOneSyncConflictResolver
    },
    User: {
        aggregateUser: actionResolvers.AggregateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        createManyAndReturnUser: actionResolvers.CreateManyAndReturnUserResolver,
        createOneUser: actionResolvers.CreateOneUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        deleteOneUser: actionResolvers.DeleteOneUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
        users: actionResolvers.FindManyUserResolver,
        user: actionResolvers.FindUniqueUserResolver,
        getUser: actionResolvers.FindUniqueUserOrThrowResolver,
        groupByUser: actionResolvers.GroupByUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        updateOneUser: actionResolvers.UpdateOneUserResolver,
        upsertOneUser: actionResolvers.UpsertOneUserResolver
    },
    Project: {
        aggregateProject: actionResolvers.AggregateProjectResolver,
        createManyProject: actionResolvers.CreateManyProjectResolver,
        createManyAndReturnProject: actionResolvers.CreateManyAndReturnProjectResolver,
        createOneProject: actionResolvers.CreateOneProjectResolver,
        deleteManyProject: actionResolvers.DeleteManyProjectResolver,
        deleteOneProject: actionResolvers.DeleteOneProjectResolver,
        findFirstProject: actionResolvers.FindFirstProjectResolver,
        findFirstProjectOrThrow: actionResolvers.FindFirstProjectOrThrowResolver,
        projects: actionResolvers.FindManyProjectResolver,
        project: actionResolvers.FindUniqueProjectResolver,
        getProject: actionResolvers.FindUniqueProjectOrThrowResolver,
        groupByProject: actionResolvers.GroupByProjectResolver,
        updateManyProject: actionResolvers.UpdateManyProjectResolver,
        updateOneProject: actionResolvers.UpdateOneProjectResolver,
        upsertOneProject: actionResolvers.UpsertOneProjectResolver
    },
    Label: {
        aggregateLabel: actionResolvers.AggregateLabelResolver,
        createManyLabel: actionResolvers.CreateManyLabelResolver,
        createManyAndReturnLabel: actionResolvers.CreateManyAndReturnLabelResolver,
        createOneLabel: actionResolvers.CreateOneLabelResolver,
        deleteManyLabel: actionResolvers.DeleteManyLabelResolver,
        deleteOneLabel: actionResolvers.DeleteOneLabelResolver,
        findFirstLabel: actionResolvers.FindFirstLabelResolver,
        findFirstLabelOrThrow: actionResolvers.FindFirstLabelOrThrowResolver,
        labels: actionResolvers.FindManyLabelResolver,
        label: actionResolvers.FindUniqueLabelResolver,
        getLabel: actionResolvers.FindUniqueLabelOrThrowResolver,
        groupByLabel: actionResolvers.GroupByLabelResolver,
        updateManyLabel: actionResolvers.UpdateManyLabelResolver,
        updateOneLabel: actionResolvers.UpdateOneLabelResolver,
        upsertOneLabel: actionResolvers.UpsertOneLabelResolver
    },
    IssueStatus: {
        aggregateIssueStatus: actionResolvers.AggregateIssueStatusResolver,
        createManyIssueStatus: actionResolvers.CreateManyIssueStatusResolver,
        createManyAndReturnIssueStatus: actionResolvers.CreateManyAndReturnIssueStatusResolver,
        createOneIssueStatus: actionResolvers.CreateOneIssueStatusResolver,
        deleteManyIssueStatus: actionResolvers.DeleteManyIssueStatusResolver,
        deleteOneIssueStatus: actionResolvers.DeleteOneIssueStatusResolver,
        findFirstIssueStatus: actionResolvers.FindFirstIssueStatusResolver,
        findFirstIssueStatusOrThrow: actionResolvers.FindFirstIssueStatusOrThrowResolver,
        issueStatuses: actionResolvers.FindManyIssueStatusResolver,
        issueStatus: actionResolvers.FindUniqueIssueStatusResolver,
        getIssueStatus: actionResolvers.FindUniqueIssueStatusOrThrowResolver,
        groupByIssueStatus: actionResolvers.GroupByIssueStatusResolver,
        updateManyIssueStatus: actionResolvers.UpdateManyIssueStatusResolver,
        updateOneIssueStatus: actionResolvers.UpdateOneIssueStatusResolver,
        upsertOneIssueStatus: actionResolvers.UpsertOneIssueStatusResolver
    },
    IssuePriority: {
        aggregateIssuePriority: actionResolvers.AggregateIssuePriorityResolver,
        createManyIssuePriority: actionResolvers.CreateManyIssuePriorityResolver,
        createManyAndReturnIssuePriority: actionResolvers.CreateManyAndReturnIssuePriorityResolver,
        createOneIssuePriority: actionResolvers.CreateOneIssuePriorityResolver,
        deleteManyIssuePriority: actionResolvers.DeleteManyIssuePriorityResolver,
        deleteOneIssuePriority: actionResolvers.DeleteOneIssuePriorityResolver,
        findFirstIssuePriority: actionResolvers.FindFirstIssuePriorityResolver,
        findFirstIssuePriorityOrThrow: actionResolvers.FindFirstIssuePriorityOrThrowResolver,
        issuePriorities: actionResolvers.FindManyIssuePriorityResolver,
        issuePriority: actionResolvers.FindUniqueIssuePriorityResolver,
        getIssuePriority: actionResolvers.FindUniqueIssuePriorityOrThrowResolver,
        groupByIssuePriority: actionResolvers.GroupByIssuePriorityResolver,
        updateManyIssuePriority: actionResolvers.UpdateManyIssuePriorityResolver,
        updateOneIssuePriority: actionResolvers.UpdateOneIssuePriorityResolver,
        upsertOneIssuePriority: actionResolvers.UpsertOneIssuePriorityResolver
    },
    Issue: {
        aggregateIssue: actionResolvers.AggregateIssueResolver,
        createManyIssue: actionResolvers.CreateManyIssueResolver,
        createManyAndReturnIssue: actionResolvers.CreateManyAndReturnIssueResolver,
        createOneIssue: actionResolvers.CreateOneIssueResolver,
        deleteManyIssue: actionResolvers.DeleteManyIssueResolver,
        deleteOneIssue: actionResolvers.DeleteOneIssueResolver,
        findFirstIssue: actionResolvers.FindFirstIssueResolver,
        findFirstIssueOrThrow: actionResolvers.FindFirstIssueOrThrowResolver,
        issues: actionResolvers.FindManyIssueResolver,
        issue: actionResolvers.FindUniqueIssueResolver,
        getIssue: actionResolvers.FindUniqueIssueOrThrowResolver,
        groupByIssue: actionResolvers.GroupByIssueResolver,
        updateManyIssue: actionResolvers.UpdateManyIssueResolver,
        updateOneIssue: actionResolvers.UpdateOneIssueResolver,
        upsertOneIssue: actionResolvers.UpsertOneIssueResolver
    },
    IssueLabel: {
        aggregateIssueLabel: actionResolvers.AggregateIssueLabelResolver,
        createManyIssueLabel: actionResolvers.CreateManyIssueLabelResolver,
        createManyAndReturnIssueLabel: actionResolvers.CreateManyAndReturnIssueLabelResolver,
        createOneIssueLabel: actionResolvers.CreateOneIssueLabelResolver,
        deleteManyIssueLabel: actionResolvers.DeleteManyIssueLabelResolver,
        deleteOneIssueLabel: actionResolvers.DeleteOneIssueLabelResolver,
        findFirstIssueLabel: actionResolvers.FindFirstIssueLabelResolver,
        findFirstIssueLabelOrThrow: actionResolvers.FindFirstIssueLabelOrThrowResolver,
        issueLabels: actionResolvers.FindManyIssueLabelResolver,
        issueLabel: actionResolvers.FindUniqueIssueLabelResolver,
        getIssueLabel: actionResolvers.FindUniqueIssueLabelOrThrowResolver,
        groupByIssueLabel: actionResolvers.GroupByIssueLabelResolver,
        updateManyIssueLabel: actionResolvers.UpdateManyIssueLabelResolver,
        updateOneIssueLabel: actionResolvers.UpdateOneIssueLabelResolver,
        upsertOneIssueLabel: actionResolvers.UpsertOneIssueLabelResolver
    },
    Cycle: {
        aggregateCycle: actionResolvers.AggregateCycleResolver,
        createManyCycle: actionResolvers.CreateManyCycleResolver,
        createManyAndReturnCycle: actionResolvers.CreateManyAndReturnCycleResolver,
        createOneCycle: actionResolvers.CreateOneCycleResolver,
        deleteManyCycle: actionResolvers.DeleteManyCycleResolver,
        deleteOneCycle: actionResolvers.DeleteOneCycleResolver,
        findFirstCycle: actionResolvers.FindFirstCycleResolver,
        findFirstCycleOrThrow: actionResolvers.FindFirstCycleOrThrowResolver,
        cycles: actionResolvers.FindManyCycleResolver,
        cycle: actionResolvers.FindUniqueCycleResolver,
        getCycle: actionResolvers.FindUniqueCycleOrThrowResolver,
        groupByCycle: actionResolvers.GroupByCycleResolver,
        updateManyCycle: actionResolvers.UpdateManyCycleResolver,
        updateOneCycle: actionResolvers.UpdateOneCycleResolver,
        upsertOneCycle: actionResolvers.UpsertOneCycleResolver
    },
    Team: {
        aggregateTeam: actionResolvers.AggregateTeamResolver,
        createManyTeam: actionResolvers.CreateManyTeamResolver,
        createManyAndReturnTeam: actionResolvers.CreateManyAndReturnTeamResolver,
        createOneTeam: actionResolvers.CreateOneTeamResolver,
        deleteManyTeam: actionResolvers.DeleteManyTeamResolver,
        deleteOneTeam: actionResolvers.DeleteOneTeamResolver,
        findFirstTeam: actionResolvers.FindFirstTeamResolver,
        findFirstTeamOrThrow: actionResolvers.FindFirstTeamOrThrowResolver,
        teams: actionResolvers.FindManyTeamResolver,
        team: actionResolvers.FindUniqueTeamResolver,
        getTeam: actionResolvers.FindUniqueTeamOrThrowResolver,
        groupByTeam: actionResolvers.GroupByTeamResolver,
        updateManyTeam: actionResolvers.UpdateManyTeamResolver,
        updateOneTeam: actionResolvers.UpdateOneTeamResolver,
        upsertOneTeam: actionResolvers.UpsertOneTeamResolver
    },
    TeamMember: {
        aggregateTeamMember: actionResolvers.AggregateTeamMemberResolver,
        createManyTeamMember: actionResolvers.CreateManyTeamMemberResolver,
        createManyAndReturnTeamMember: actionResolvers.CreateManyAndReturnTeamMemberResolver,
        createOneTeamMember: actionResolvers.CreateOneTeamMemberResolver,
        deleteManyTeamMember: actionResolvers.DeleteManyTeamMemberResolver,
        deleteOneTeamMember: actionResolvers.DeleteOneTeamMemberResolver,
        findFirstTeamMember: actionResolvers.FindFirstTeamMemberResolver,
        findFirstTeamMemberOrThrow: actionResolvers.FindFirstTeamMemberOrThrowResolver,
        teamMembers: actionResolvers.FindManyTeamMemberResolver,
        teamMember: actionResolvers.FindUniqueTeamMemberResolver,
        getTeamMember: actionResolvers.FindUniqueTeamMemberOrThrowResolver,
        groupByTeamMember: actionResolvers.GroupByTeamMemberResolver,
        updateManyTeamMember: actionResolvers.UpdateManyTeamMemberResolver,
        updateOneTeamMember: actionResolvers.UpdateOneTeamMemberResolver,
        upsertOneTeamMember: actionResolvers.UpsertOneTeamMemberResolver
    },
    TeamProject: {
        aggregateTeamProject: actionResolvers.AggregateTeamProjectResolver,
        createManyTeamProject: actionResolvers.CreateManyTeamProjectResolver,
        createManyAndReturnTeamProject: actionResolvers.CreateManyAndReturnTeamProjectResolver,
        createOneTeamProject: actionResolvers.CreateOneTeamProjectResolver,
        deleteManyTeamProject: actionResolvers.DeleteManyTeamProjectResolver,
        deleteOneTeamProject: actionResolvers.DeleteOneTeamProjectResolver,
        findFirstTeamProject: actionResolvers.FindFirstTeamProjectResolver,
        findFirstTeamProjectOrThrow: actionResolvers.FindFirstTeamProjectOrThrowResolver,
        teamProjects: actionResolvers.FindManyTeamProjectResolver,
        teamProject: actionResolvers.FindUniqueTeamProjectResolver,
        getTeamProject: actionResolvers.FindUniqueTeamProjectOrThrowResolver,
        groupByTeamProject: actionResolvers.GroupByTeamProjectResolver,
        updateManyTeamProject: actionResolvers.UpdateManyTeamProjectResolver,
        updateOneTeamProject: actionResolvers.UpdateOneTeamProjectResolver,
        upsertOneTeamProject: actionResolvers.UpsertOneTeamProjectResolver
    }
};
const crudResolversInfo = {
    Task: ["aggregateTask", "createManyTask", "createManyAndReturnTask", "createOneTask", "deleteManyTask", "deleteOneTask", "findFirstTask", "findFirstTaskOrThrow", "tasks", "task", "getTask", "groupByTask", "updateManyTask", "updateOneTask", "upsertOneTask"],
    Subtask: ["aggregateSubtask", "createManySubtask", "createManyAndReturnSubtask", "createOneSubtask", "deleteManySubtask", "deleteOneSubtask", "findFirstSubtask", "findFirstSubtaskOrThrow", "subtasks", "subtask", "getSubtask", "groupBySubtask", "updateManySubtask", "updateOneSubtask", "upsertOneSubtask"],
    TaskDependency: ["aggregateTaskDependency", "createManyTaskDependency", "createManyAndReturnTaskDependency", "createOneTaskDependency", "deleteManyTaskDependency", "deleteOneTaskDependency", "findFirstTaskDependency", "findFirstTaskDependencyOrThrow", "taskDependencies", "taskDependency", "getTaskDependency", "groupByTaskDependency", "updateManyTaskDependency", "updateOneTaskDependency", "upsertOneTaskDependency"],
    TaskMasterMetadata: ["aggregateTaskMasterMetadata", "createManyTaskMasterMetadata", "createManyAndReturnTaskMasterMetadata", "createOneTaskMasterMetadata", "deleteManyTaskMasterMetadata", "deleteOneTaskMasterMetadata", "findFirstTaskMasterMetadata", "findFirstTaskMasterMetadataOrThrow", "findManyTaskMasterMetadata", "findUniqueTaskMasterMetadata", "findUniqueTaskMasterMetadataOrThrow", "groupByTaskMasterMetadata", "updateManyTaskMasterMetadata", "updateOneTaskMasterMetadata", "upsertOneTaskMasterMetadata"],
    SyncOperation: ["aggregateSyncOperation", "createManySyncOperation", "createManyAndReturnSyncOperation", "createOneSyncOperation", "deleteManySyncOperation", "deleteOneSyncOperation", "findFirstSyncOperation", "findFirstSyncOperationOrThrow", "syncOperations", "syncOperation", "getSyncOperation", "groupBySyncOperation", "updateManySyncOperation", "updateOneSyncOperation", "upsertOneSyncOperation"],
    SyncConflict: ["aggregateSyncConflict", "createManySyncConflict", "createManyAndReturnSyncConflict", "createOneSyncConflict", "deleteManySyncConflict", "deleteOneSyncConflict", "findFirstSyncConflict", "findFirstSyncConflictOrThrow", "syncConflicts", "syncConflict", "getSyncConflict", "groupBySyncConflict", "updateManySyncConflict", "updateOneSyncConflict", "upsertOneSyncConflict"],
    User: ["aggregateUser", "createManyUser", "createManyAndReturnUser", "createOneUser", "deleteManyUser", "deleteOneUser", "findFirstUser", "findFirstUserOrThrow", "users", "user", "getUser", "groupByUser", "updateManyUser", "updateOneUser", "upsertOneUser"],
    Project: ["aggregateProject", "createManyProject", "createManyAndReturnProject", "createOneProject", "deleteManyProject", "deleteOneProject", "findFirstProject", "findFirstProjectOrThrow", "projects", "project", "getProject", "groupByProject", "updateManyProject", "updateOneProject", "upsertOneProject"],
    Label: ["aggregateLabel", "createManyLabel", "createManyAndReturnLabel", "createOneLabel", "deleteManyLabel", "deleteOneLabel", "findFirstLabel", "findFirstLabelOrThrow", "labels", "label", "getLabel", "groupByLabel", "updateManyLabel", "updateOneLabel", "upsertOneLabel"],
    IssueStatus: ["aggregateIssueStatus", "createManyIssueStatus", "createManyAndReturnIssueStatus", "createOneIssueStatus", "deleteManyIssueStatus", "deleteOneIssueStatus", "findFirstIssueStatus", "findFirstIssueStatusOrThrow", "issueStatuses", "issueStatus", "getIssueStatus", "groupByIssueStatus", "updateManyIssueStatus", "updateOneIssueStatus", "upsertOneIssueStatus"],
    IssuePriority: ["aggregateIssuePriority", "createManyIssuePriority", "createManyAndReturnIssuePriority", "createOneIssuePriority", "deleteManyIssuePriority", "deleteOneIssuePriority", "findFirstIssuePriority", "findFirstIssuePriorityOrThrow", "issuePriorities", "issuePriority", "getIssuePriority", "groupByIssuePriority", "updateManyIssuePriority", "updateOneIssuePriority", "upsertOneIssuePriority"],
    Issue: ["aggregateIssue", "createManyIssue", "createManyAndReturnIssue", "createOneIssue", "deleteManyIssue", "deleteOneIssue", "findFirstIssue", "findFirstIssueOrThrow", "issues", "issue", "getIssue", "groupByIssue", "updateManyIssue", "updateOneIssue", "upsertOneIssue"],
    IssueLabel: ["aggregateIssueLabel", "createManyIssueLabel", "createManyAndReturnIssueLabel", "createOneIssueLabel", "deleteManyIssueLabel", "deleteOneIssueLabel", "findFirstIssueLabel", "findFirstIssueLabelOrThrow", "issueLabels", "issueLabel", "getIssueLabel", "groupByIssueLabel", "updateManyIssueLabel", "updateOneIssueLabel", "upsertOneIssueLabel"],
    Cycle: ["aggregateCycle", "createManyCycle", "createManyAndReturnCycle", "createOneCycle", "deleteManyCycle", "deleteOneCycle", "findFirstCycle", "findFirstCycleOrThrow", "cycles", "cycle", "getCycle", "groupByCycle", "updateManyCycle", "updateOneCycle", "upsertOneCycle"],
    Team: ["aggregateTeam", "createManyTeam", "createManyAndReturnTeam", "createOneTeam", "deleteManyTeam", "deleteOneTeam", "findFirstTeam", "findFirstTeamOrThrow", "teams", "team", "getTeam", "groupByTeam", "updateManyTeam", "updateOneTeam", "upsertOneTeam"],
    TeamMember: ["aggregateTeamMember", "createManyTeamMember", "createManyAndReturnTeamMember", "createOneTeamMember", "deleteManyTeamMember", "deleteOneTeamMember", "findFirstTeamMember", "findFirstTeamMemberOrThrow", "teamMembers", "teamMember", "getTeamMember", "groupByTeamMember", "updateManyTeamMember", "updateOneTeamMember", "upsertOneTeamMember"],
    TeamProject: ["aggregateTeamProject", "createManyTeamProject", "createManyAndReturnTeamProject", "createOneTeamProject", "deleteManyTeamProject", "deleteOneTeamProject", "findFirstTeamProject", "findFirstTeamProjectOrThrow", "teamProjects", "teamProject", "getTeamProject", "groupByTeamProject", "updateManyTeamProject", "updateOneTeamProject", "upsertOneTeamProject"]
};
const argsInfo = {
    AggregateTaskArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTaskArgs: ["data"],
    CreateManyAndReturnTaskArgs: ["data"],
    CreateOneTaskArgs: ["data"],
    DeleteManyTaskArgs: ["where"],
    DeleteOneTaskArgs: ["where"],
    FindFirstTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTaskOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTaskArgs: ["where"],
    FindUniqueTaskOrThrowArgs: ["where"],
    GroupByTaskArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTaskArgs: ["data", "where"],
    UpdateOneTaskArgs: ["data", "where"],
    UpsertOneTaskArgs: ["where", "create", "update"],
    AggregateSubtaskArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManySubtaskArgs: ["data"],
    CreateManyAndReturnSubtaskArgs: ["data"],
    CreateOneSubtaskArgs: ["data"],
    DeleteManySubtaskArgs: ["where"],
    DeleteOneSubtaskArgs: ["where"],
    FindFirstSubtaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstSubtaskOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySubtaskArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueSubtaskArgs: ["where"],
    FindUniqueSubtaskOrThrowArgs: ["where"],
    GroupBySubtaskArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManySubtaskArgs: ["data", "where"],
    UpdateOneSubtaskArgs: ["data", "where"],
    UpsertOneSubtaskArgs: ["where", "create", "update"],
    AggregateTaskDependencyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTaskDependencyArgs: ["data"],
    CreateManyAndReturnTaskDependencyArgs: ["data"],
    CreateOneTaskDependencyArgs: ["data"],
    DeleteManyTaskDependencyArgs: ["where"],
    DeleteOneTaskDependencyArgs: ["where"],
    FindFirstTaskDependencyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTaskDependencyOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTaskDependencyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTaskDependencyArgs: ["where"],
    FindUniqueTaskDependencyOrThrowArgs: ["where"],
    GroupByTaskDependencyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTaskDependencyArgs: ["data", "where"],
    UpdateOneTaskDependencyArgs: ["data", "where"],
    UpsertOneTaskDependencyArgs: ["where", "create", "update"],
    AggregateTaskMasterMetadataArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTaskMasterMetadataArgs: ["data"],
    CreateManyAndReturnTaskMasterMetadataArgs: ["data"],
    CreateOneTaskMasterMetadataArgs: ["data"],
    DeleteManyTaskMasterMetadataArgs: ["where"],
    DeleteOneTaskMasterMetadataArgs: ["where"],
    FindFirstTaskMasterMetadataArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTaskMasterMetadataOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTaskMasterMetadataArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTaskMasterMetadataArgs: ["where"],
    FindUniqueTaskMasterMetadataOrThrowArgs: ["where"],
    GroupByTaskMasterMetadataArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTaskMasterMetadataArgs: ["data", "where"],
    UpdateOneTaskMasterMetadataArgs: ["data", "where"],
    UpsertOneTaskMasterMetadataArgs: ["where", "create", "update"],
    AggregateSyncOperationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManySyncOperationArgs: ["data"],
    CreateManyAndReturnSyncOperationArgs: ["data"],
    CreateOneSyncOperationArgs: ["data"],
    DeleteManySyncOperationArgs: ["where"],
    DeleteOneSyncOperationArgs: ["where"],
    FindFirstSyncOperationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstSyncOperationOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySyncOperationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueSyncOperationArgs: ["where"],
    FindUniqueSyncOperationOrThrowArgs: ["where"],
    GroupBySyncOperationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManySyncOperationArgs: ["data", "where"],
    UpdateOneSyncOperationArgs: ["data", "where"],
    UpsertOneSyncOperationArgs: ["where", "create", "update"],
    AggregateSyncConflictArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManySyncConflictArgs: ["data"],
    CreateManyAndReturnSyncConflictArgs: ["data"],
    CreateOneSyncConflictArgs: ["data"],
    DeleteManySyncConflictArgs: ["where"],
    DeleteOneSyncConflictArgs: ["where"],
    FindFirstSyncConflictArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstSyncConflictOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySyncConflictArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueSyncConflictArgs: ["where"],
    FindUniqueSyncConflictOrThrowArgs: ["where"],
    GroupBySyncConflictArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManySyncConflictArgs: ["data", "where"],
    UpdateOneSyncConflictArgs: ["data", "where"],
    UpsertOneSyncConflictArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyUserArgs: ["data"],
    CreateManyAndReturnUserArgs: ["data"],
    CreateOneUserArgs: ["data"],
    DeleteManyUserArgs: ["where"],
    DeleteOneUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueUserArgs: ["where"],
    FindUniqueUserOrThrowArgs: ["where"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyUserArgs: ["data", "where"],
    UpdateOneUserArgs: ["data", "where"],
    UpsertOneUserArgs: ["where", "create", "update"],
    AggregateProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyProjectArgs: ["data"],
    CreateManyAndReturnProjectArgs: ["data"],
    CreateOneProjectArgs: ["data"],
    DeleteManyProjectArgs: ["where"],
    DeleteOneProjectArgs: ["where"],
    FindFirstProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstProjectOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueProjectArgs: ["where"],
    FindUniqueProjectOrThrowArgs: ["where"],
    GroupByProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyProjectArgs: ["data", "where"],
    UpdateOneProjectArgs: ["data", "where"],
    UpsertOneProjectArgs: ["where", "create", "update"],
    AggregateLabelArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyLabelArgs: ["data"],
    CreateManyAndReturnLabelArgs: ["data"],
    CreateOneLabelArgs: ["data"],
    DeleteManyLabelArgs: ["where"],
    DeleteOneLabelArgs: ["where"],
    FindFirstLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstLabelOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueLabelArgs: ["where"],
    FindUniqueLabelOrThrowArgs: ["where"],
    GroupByLabelArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyLabelArgs: ["data", "where"],
    UpdateOneLabelArgs: ["data", "where"],
    UpsertOneLabelArgs: ["where", "create", "update"],
    AggregateIssueStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyIssueStatusArgs: ["data"],
    CreateManyAndReturnIssueStatusArgs: ["data"],
    CreateOneIssueStatusArgs: ["data"],
    DeleteManyIssueStatusArgs: ["where"],
    DeleteOneIssueStatusArgs: ["where"],
    FindFirstIssueStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstIssueStatusOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyIssueStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueIssueStatusArgs: ["where"],
    FindUniqueIssueStatusOrThrowArgs: ["where"],
    GroupByIssueStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyIssueStatusArgs: ["data", "where"],
    UpdateOneIssueStatusArgs: ["data", "where"],
    UpsertOneIssueStatusArgs: ["where", "create", "update"],
    AggregateIssuePriorityArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyIssuePriorityArgs: ["data"],
    CreateManyAndReturnIssuePriorityArgs: ["data"],
    CreateOneIssuePriorityArgs: ["data"],
    DeleteManyIssuePriorityArgs: ["where"],
    DeleteOneIssuePriorityArgs: ["where"],
    FindFirstIssuePriorityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstIssuePriorityOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyIssuePriorityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueIssuePriorityArgs: ["where"],
    FindUniqueIssuePriorityOrThrowArgs: ["where"],
    GroupByIssuePriorityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyIssuePriorityArgs: ["data", "where"],
    UpdateOneIssuePriorityArgs: ["data", "where"],
    UpsertOneIssuePriorityArgs: ["where", "create", "update"],
    AggregateIssueArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyIssueArgs: ["data"],
    CreateManyAndReturnIssueArgs: ["data"],
    CreateOneIssueArgs: ["data"],
    DeleteManyIssueArgs: ["where"],
    DeleteOneIssueArgs: ["where"],
    FindFirstIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstIssueOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyIssueArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueIssueArgs: ["where"],
    FindUniqueIssueOrThrowArgs: ["where"],
    GroupByIssueArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyIssueArgs: ["data", "where"],
    UpdateOneIssueArgs: ["data", "where"],
    UpsertOneIssueArgs: ["where", "create", "update"],
    AggregateIssueLabelArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyIssueLabelArgs: ["data"],
    CreateManyAndReturnIssueLabelArgs: ["data"],
    CreateOneIssueLabelArgs: ["data"],
    DeleteManyIssueLabelArgs: ["where"],
    DeleteOneIssueLabelArgs: ["where"],
    FindFirstIssueLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstIssueLabelOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyIssueLabelArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueIssueLabelArgs: ["where"],
    FindUniqueIssueLabelOrThrowArgs: ["where"],
    GroupByIssueLabelArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyIssueLabelArgs: ["data", "where"],
    UpdateOneIssueLabelArgs: ["data", "where"],
    UpsertOneIssueLabelArgs: ["where", "create", "update"],
    AggregateCycleArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyCycleArgs: ["data"],
    CreateManyAndReturnCycleArgs: ["data"],
    CreateOneCycleArgs: ["data"],
    DeleteManyCycleArgs: ["where"],
    DeleteOneCycleArgs: ["where"],
    FindFirstCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstCycleOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCycleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueCycleArgs: ["where"],
    FindUniqueCycleOrThrowArgs: ["where"],
    GroupByCycleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyCycleArgs: ["data", "where"],
    UpdateOneCycleArgs: ["data", "where"],
    UpsertOneCycleArgs: ["where", "create", "update"],
    AggregateTeamArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTeamArgs: ["data"],
    CreateManyAndReturnTeamArgs: ["data"],
    CreateOneTeamArgs: ["data"],
    DeleteManyTeamArgs: ["where"],
    DeleteOneTeamArgs: ["where"],
    FindFirstTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTeamOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTeamArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTeamArgs: ["where"],
    FindUniqueTeamOrThrowArgs: ["where"],
    GroupByTeamArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTeamArgs: ["data", "where"],
    UpdateOneTeamArgs: ["data", "where"],
    UpsertOneTeamArgs: ["where", "create", "update"],
    AggregateTeamMemberArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTeamMemberArgs: ["data"],
    CreateManyAndReturnTeamMemberArgs: ["data"],
    CreateOneTeamMemberArgs: ["data"],
    DeleteManyTeamMemberArgs: ["where"],
    DeleteOneTeamMemberArgs: ["where"],
    FindFirstTeamMemberArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTeamMemberOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTeamMemberArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTeamMemberArgs: ["where"],
    FindUniqueTeamMemberOrThrowArgs: ["where"],
    GroupByTeamMemberArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTeamMemberArgs: ["data", "where"],
    UpdateOneTeamMemberArgs: ["data", "where"],
    UpsertOneTeamMemberArgs: ["where", "create", "update"],
    AggregateTeamProjectArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyTeamProjectArgs: ["data"],
    CreateManyAndReturnTeamProjectArgs: ["data"],
    CreateOneTeamProjectArgs: ["data"],
    DeleteManyTeamProjectArgs: ["where"],
    DeleteOneTeamProjectArgs: ["where"],
    FindFirstTeamProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstTeamProjectOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTeamProjectArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueTeamProjectArgs: ["where"],
    FindUniqueTeamProjectOrThrowArgs: ["where"],
    GroupByTeamProjectArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyTeamProjectArgs: ["data", "where"],
    UpdateOneTeamProjectArgs: ["data", "where"],
    UpsertOneTeamProjectArgs: ["where", "create", "update"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    const mutationOperationPrefixes = [
        "createOne", "createMany", "createManyAndReturn", "deleteOne", "updateOne", "deleteMany", "updateMany", "upsertOne"
    ];
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        const allActionsDecorators = resolverActionsConfig._all;
        const resolverActionNames = crudResolversInfo[modelName];
        for (const resolverActionName of resolverActionNames) {
            const maybeDecoratorsOrFn = resolverActionsConfig[resolverActionName];
            const isWriteOperation = mutationOperationPrefixes.some(prefix => resolverActionName.startsWith(prefix));
            const operationKindDecorators = isWriteOperation ? resolverActionsConfig._mutation : resolverActionsConfig._query;
            const mainDecorators = [
                ...allActionsDecorators ?? [],
                ...operationKindDecorators ?? [],
            ];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(mainDecorators);
            }
            else {
                decorators = [...mainDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
const relationResolversMap = {
    Task: relationResolvers.TaskRelationsResolver,
    Subtask: relationResolvers.SubtaskRelationsResolver,
    TaskDependency: relationResolvers.TaskDependencyRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Project: relationResolvers.ProjectRelationsResolver,
    Label: relationResolvers.LabelRelationsResolver,
    IssueStatus: relationResolvers.IssueStatusRelationsResolver,
    IssuePriority: relationResolvers.IssuePriorityRelationsResolver,
    Issue: relationResolvers.IssueRelationsResolver,
    IssueLabel: relationResolvers.IssueLabelRelationsResolver,
    Cycle: relationResolvers.CycleRelationsResolver,
    Team: relationResolvers.TeamRelationsResolver,
    TeamMember: relationResolvers.TeamMemberRelationsResolver,
    TeamProject: relationResolvers.TeamProjectRelationsResolver
};
const relationResolversInfo = {
    Task: ["subtasks", "dependencies", "dependents", "issues"],
    Subtask: ["parentTask", "issues"],
    TaskDependency: ["task", "dependsOn"],
    User: ["assignedIssues", "teams", "ledProjects"],
    Project: ["issues", "lead", "teams"],
    Label: ["issues"],
    IssueStatus: ["issues"],
    IssuePriority: ["issues"],
    Issue: ["assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueLabel: ["issue", "label"],
    Cycle: ["team", "issues"],
    Team: ["members", "projects", "cycles"],
    TeamMember: ["team", "user"],
    TeamProject: ["team", "project"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        const allActionsDecorators = relationResolverActionsConfig._all ?? [];
        const relationResolverActionNames = relationResolversInfo[modelName];
        for (const relationResolverActionName of relationResolverActionNames) {
            const maybeDecoratorsOrFn = relationResolverActionsConfig[relationResolverActionName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allActionsDecorators);
            }
            else {
                decorators = [...allActionsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        const allFieldsDecorators = enhanceConfig.fields._all ?? [];
        for (const typeFieldName of typeFieldNames) {
            const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allFieldsDecorators);
            }
            else {
                decorators = [...allFieldsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Task: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    Subtask: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    TaskDependency: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskMasterMetadata: ["id", "created", "updated", "description"],
    SyncOperation: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncConflict: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    User: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    Project: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    Label: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    IssueStatus: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriority: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    Issue: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueLabel: ["id", "issueId", "labelId"],
    Cycle: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    Team: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMember: ["id", "teamId", "userId"],
    TeamProject: ["id", "teamId", "projectId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
const outputsInfo = {
    AggregateTask: ["_count", "_avg", "_sum", "_min", "_max"],
    TaskGroupBy: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSubtask: ["_count", "_avg", "_sum", "_min", "_max"],
    SubtaskGroupBy: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTaskDependency: ["_count", "_avg", "_sum", "_min", "_max"],
    TaskDependencyGroupBy: ["id", "taskId", "dependsOnId", "createdAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTaskMasterMetadata: ["_count", "_avg", "_sum", "_min", "_max"],
    TaskMasterMetadataGroupBy: ["id", "created", "updated", "description", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSyncOperation: ["_count", "_avg", "_sum", "_min", "_max"],
    SyncOperationGroupBy: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSyncConflict: ["_count", "_min", "_max"],
    SyncConflictGroupBy: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateProject: ["_count", "_avg", "_sum", "_min", "_max"],
    ProjectGroupBy: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLabel: ["_count", "_min", "_max"],
    LabelGroupBy: ["id", "name", "color", "description", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateIssueStatus: ["_count", "_min", "_max"],
    IssueStatusGroupBy: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateIssuePriority: ["_count", "_avg", "_sum", "_min", "_max"],
    IssuePriorityGroupBy: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateIssue: ["_count", "_avg", "_sum", "_min", "_max"],
    IssueGroupBy: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateIssueLabel: ["_count", "_min", "_max"],
    IssueLabelGroupBy: ["id", "issueId", "labelId", "_count", "_min", "_max"],
    AggregateCycle: ["_count", "_avg", "_sum", "_min", "_max"],
    CycleGroupBy: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTeam: ["_count", "_min", "_max"],
    TeamGroupBy: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateTeamMember: ["_count", "_min", "_max"],
    TeamMemberGroupBy: ["id", "teamId", "userId", "_count", "_min", "_max"],
    AggregateTeamProject: ["_count", "_min", "_max"],
    TeamProjectGroupBy: ["id", "teamId", "projectId", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    TaskCount: ["subtasks", "dependencies", "dependents", "issues"],
    TaskCountAggregate: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "_all"],
    TaskAvgAggregate: ["id", "complexity"],
    TaskSumAggregate: ["id", "complexity"],
    TaskMinAggregate: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    TaskMaxAggregate: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    SubtaskCount: ["issues"],
    SubtaskCountAggregate: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "_all"],
    SubtaskAvgAggregate: ["parentId"],
    SubtaskSumAggregate: ["parentId"],
    SubtaskMinAggregate: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    SubtaskMaxAggregate: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    TaskDependencyCountAggregate: ["id", "taskId", "dependsOnId", "createdAt", "_all"],
    TaskDependencyAvgAggregate: ["id", "taskId", "dependsOnId"],
    TaskDependencySumAggregate: ["id", "taskId", "dependsOnId"],
    TaskDependencyMinAggregate: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencyMaxAggregate: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskMasterMetadataCountAggregate: ["id", "created", "updated", "description", "_all"],
    TaskMasterMetadataAvgAggregate: ["id"],
    TaskMasterMetadataSumAggregate: ["id"],
    TaskMasterMetadataMinAggregate: ["id", "created", "updated", "description"],
    TaskMasterMetadataMaxAggregate: ["id", "created", "updated", "description"],
    SyncOperationCountAggregate: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds", "_all"],
    SyncOperationAvgAggregate: ["retryCount", "maxRetries"],
    SyncOperationSumAggregate: ["retryCount", "maxRetries"],
    SyncOperationMinAggregate: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationMaxAggregate: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncConflictCountAggregate: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp", "_all"],
    SyncConflictMinAggregate: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictMaxAggregate: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    UserCount: ["assignedIssues", "teams", "ledProjects"],
    UserCountAggregate: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "_all"],
    UserMinAggregate: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    UserMaxAggregate: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    ProjectCount: ["issues", "teams"],
    ProjectCountAggregate: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "_all"],
    ProjectAvgAggregate: ["percentComplete"],
    ProjectSumAggregate: ["percentComplete"],
    ProjectMinAggregate: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    ProjectMaxAggregate: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    LabelCount: ["issues"],
    LabelCountAggregate: ["id", "name", "color", "description", "createdAt", "updatedAt", "_all"],
    LabelMinAggregate: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    LabelMaxAggregate: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    IssueStatusCount: ["issues"],
    IssueStatusCountAggregate: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "_all"],
    IssueStatusMinAggregate: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssueStatusMaxAggregate: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriorityCount: ["issues"],
    IssuePriorityCountAggregate: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "_all"],
    IssuePriorityAvgAggregate: ["order"],
    IssuePrioritySumAggregate: ["order"],
    IssuePriorityMinAggregate: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePriorityMaxAggregate: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssueCount: ["labels", "subIssues"],
    IssueCountAggregate: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "_all"],
    IssueAvgAggregate: ["taskId"],
    IssueSumAggregate: ["taskId"],
    IssueMinAggregate: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueMaxAggregate: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueLabelCountAggregate: ["id", "issueId", "labelId", "_all"],
    IssueLabelMinAggregate: ["id", "issueId", "labelId"],
    IssueLabelMaxAggregate: ["id", "issueId", "labelId"],
    CycleCount: ["issues"],
    CycleCountAggregate: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "_all"],
    CycleAvgAggregate: ["number", "progress"],
    CycleSumAggregate: ["number", "progress"],
    CycleMinAggregate: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    CycleMaxAggregate: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    TeamCount: ["members", "projects", "cycles"],
    TeamCountAggregate: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "_all"],
    TeamMinAggregate: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMaxAggregate: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMemberCountAggregate: ["id", "teamId", "userId", "_all"],
    TeamMemberMinAggregate: ["id", "teamId", "userId"],
    TeamMemberMaxAggregate: ["id", "teamId", "userId"],
    TeamProjectCountAggregate: ["id", "teamId", "projectId", "_all"],
    TeamProjectMinAggregate: ["id", "teamId", "projectId"],
    TeamProjectMaxAggregate: ["id", "teamId", "projectId"],
    CreateManyAndReturnTask: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    CreateManyAndReturnSubtask: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "parentTask"],
    CreateManyAndReturnTaskDependency: ["id", "taskId", "dependsOnId", "createdAt", "task", "dependsOn"],
    CreateManyAndReturnTaskMasterMetadata: ["id", "created", "updated", "description"],
    CreateManyAndReturnSyncOperation: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    CreateManyAndReturnSyncConflict: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    CreateManyAndReturnUser: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    CreateManyAndReturnProject: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "lead"],
    CreateManyAndReturnLabel: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    CreateManyAndReturnIssueStatus: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    CreateManyAndReturnIssuePriority: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    CreateManyAndReturnIssue: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "parentIssue"],
    CreateManyAndReturnIssueLabel: ["id", "issueId", "labelId", "issue", "label"],
    CreateManyAndReturnCycle: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team"],
    CreateManyAndReturnTeam: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    CreateManyAndReturnTeamMember: ["id", "teamId", "userId", "team", "user"],
    CreateManyAndReturnTeamProject: ["id", "teamId", "projectId", "team", "project"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
const inputsInfo = {
    TaskWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents", "issues"],
    TaskOrderByWithRelationInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents", "issues"],
    TaskWhereUniqueInput: ["id", "AND", "OR", "NOT", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents", "issues"],
    TaskOrderByWithAggregationInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    TaskScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    SubtaskWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "parentTask", "issues"],
    SubtaskOrderByWithRelationInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "parentTask", "issues"],
    SubtaskWhereUniqueInput: ["id", "AND", "OR", "NOT", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "parentTask", "issues"],
    SubtaskOrderByWithAggregationInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    SubtaskScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    TaskDependencyWhereInput: ["AND", "OR", "NOT", "id", "taskId", "dependsOnId", "createdAt", "task", "dependsOn"],
    TaskDependencyOrderByWithRelationInput: ["id", "taskId", "dependsOnId", "createdAt", "task", "dependsOn"],
    TaskDependencyWhereUniqueInput: ["id", "taskId_dependsOnId", "AND", "OR", "NOT", "taskId", "dependsOnId", "createdAt", "task", "dependsOn"],
    TaskDependencyOrderByWithAggregationInput: ["id", "taskId", "dependsOnId", "createdAt", "_count", "_avg", "_max", "_min", "_sum"],
    TaskDependencyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "taskId", "dependsOnId", "createdAt"],
    TaskMasterMetadataWhereInput: ["AND", "OR", "NOT", "id", "created", "updated", "description"],
    TaskMasterMetadataOrderByWithRelationInput: ["id", "created", "updated", "description"],
    TaskMasterMetadataWhereUniqueInput: ["id", "AND", "OR", "NOT", "created", "updated", "description"],
    TaskMasterMetadataOrderByWithAggregationInput: ["id", "created", "updated", "description", "_count", "_avg", "_max", "_min", "_sum"],
    TaskMasterMetadataScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "created", "updated", "description"],
    SyncOperationWhereInput: ["AND", "OR", "NOT", "id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationOrderByWithRelationInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationWhereUniqueInput: ["id", "AND", "OR", "NOT", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationOrderByWithAggregationInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds", "_count", "_avg", "_max", "_min", "_sum"],
    SyncOperationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncConflictWhereInput: ["AND", "OR", "NOT", "id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictOrderByWithRelationInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictWhereUniqueInput: ["id", "AND", "OR", "NOT", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictOrderByWithAggregationInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp", "_count", "_max", "_min"],
    SyncConflictScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams", "ledProjects"],
    UserOrderByWithRelationInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams", "ledProjects"],
    UserWhereUniqueInput: ["id", "email", "AND", "OR", "NOT", "name", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams", "ledProjects"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    ProjectWhereInput: ["AND", "OR", "NOT", "id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "issues", "lead", "teams"],
    ProjectOrderByWithRelationInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "issues", "lead", "teams"],
    ProjectWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "issues", "lead", "teams"],
    ProjectOrderByWithAggregationInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    ProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    LabelWhereInput: ["AND", "OR", "NOT", "id", "name", "color", "description", "createdAt", "updatedAt", "issues"],
    LabelOrderByWithRelationInput: ["id", "name", "color", "description", "createdAt", "updatedAt", "issues"],
    LabelWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "color", "description", "createdAt", "updatedAt", "issues"],
    LabelOrderByWithAggregationInput: ["id", "name", "color", "description", "createdAt", "updatedAt", "_count", "_max", "_min"],
    LabelScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "color", "description", "createdAt", "updatedAt"],
    IssueStatusWhereInput: ["AND", "OR", "NOT", "id", "name", "color", "iconName", "createdAt", "updatedAt", "issues"],
    IssueStatusOrderByWithRelationInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "issues"],
    IssueStatusWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "color", "iconName", "createdAt", "updatedAt", "issues"],
    IssueStatusOrderByWithAggregationInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "_count", "_max", "_min"],
    IssueStatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriorityWhereInput: ["AND", "OR", "NOT", "id", "name", "iconName", "order", "createdAt", "updatedAt", "issues"],
    IssuePriorityOrderByWithRelationInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "issues"],
    IssuePriorityWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "iconName", "order", "createdAt", "updatedAt", "issues"],
    IssuePriorityOrderByWithAggregationInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    IssuePriorityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssueWhereInput: ["AND", "OR", "NOT", "id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueOrderByWithRelationInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueWhereUniqueInput: ["id", "identifier", "AND", "OR", "NOT", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueOrderByWithAggregationInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    IssueScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueLabelWhereInput: ["AND", "OR", "NOT", "id", "issueId", "labelId", "issue", "label"],
    IssueLabelOrderByWithRelationInput: ["id", "issueId", "labelId", "issue", "label"],
    IssueLabelWhereUniqueInput: ["id", "issueId_labelId", "AND", "OR", "NOT", "issueId", "labelId", "issue", "label"],
    IssueLabelOrderByWithAggregationInput: ["id", "issueId", "labelId", "_count", "_max", "_min"],
    IssueLabelScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "issueId", "labelId"],
    CycleWhereInput: ["AND", "OR", "NOT", "id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team", "issues"],
    CycleOrderByWithRelationInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team", "issues"],
    CycleWhereUniqueInput: ["id", "AND", "OR", "NOT", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team", "issues"],
    CycleOrderByWithAggregationInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    CycleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    TeamWhereInput: ["AND", "OR", "NOT", "id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects", "cycles"],
    TeamOrderByWithRelationInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects", "cycles"],
    TeamWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects", "cycles"],
    TeamOrderByWithAggregationInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "_count", "_max", "_min"],
    TeamScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMemberWhereInput: ["AND", "OR", "NOT", "id", "teamId", "userId", "team", "user"],
    TeamMemberOrderByWithRelationInput: ["id", "teamId", "userId", "team", "user"],
    TeamMemberWhereUniqueInput: ["id", "teamId_userId", "AND", "OR", "NOT", "teamId", "userId", "team", "user"],
    TeamMemberOrderByWithAggregationInput: ["id", "teamId", "userId", "_count", "_max", "_min"],
    TeamMemberScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "teamId", "userId"],
    TeamProjectWhereInput: ["AND", "OR", "NOT", "id", "teamId", "projectId", "team", "project"],
    TeamProjectOrderByWithRelationInput: ["id", "teamId", "projectId", "team", "project"],
    TeamProjectWhereUniqueInput: ["id", "teamId_projectId", "AND", "OR", "NOT", "teamId", "projectId", "team", "project"],
    TeamProjectOrderByWithAggregationInput: ["id", "teamId", "projectId", "_count", "_max", "_min"],
    TeamProjectScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "teamId", "projectId"],
    TaskCreateInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents", "issues"],
    TaskUpdateInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents", "issues"],
    TaskCreateManyInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    TaskUpdateManyMutationInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    SubtaskCreateInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "parentTask", "issues"],
    SubtaskUpdateInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "parentTask", "issues"],
    SubtaskCreateManyInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    SubtaskUpdateManyMutationInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt"],
    TaskDependencyCreateInput: ["createdAt", "task", "dependsOn"],
    TaskDependencyUpdateInput: ["createdAt", "task", "dependsOn"],
    TaskDependencyCreateManyInput: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencyUpdateManyMutationInput: ["createdAt"],
    TaskMasterMetadataCreateInput: ["created", "updated", "description"],
    TaskMasterMetadataUpdateInput: ["created", "updated", "description"],
    TaskMasterMetadataCreateManyInput: ["id", "created", "updated", "description"],
    TaskMasterMetadataUpdateManyMutationInput: ["created", "updated", "description"],
    SyncOperationCreateInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationUpdateInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationCreateManyInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationUpdateManyMutationInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncConflictCreateInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictUpdateInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictCreateManyInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictUpdateManyMutationInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    UserCreateInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams", "ledProjects"],
    UserUpdateInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams", "ledProjects"],
    UserCreateManyInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    ProjectCreateInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "lead", "teams"],
    ProjectUpdateInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "lead", "teams"],
    ProjectCreateManyInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    ProjectUpdateManyMutationInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt"],
    LabelCreateInput: ["id", "name", "color", "description", "createdAt", "updatedAt", "issues"],
    LabelUpdateInput: ["id", "name", "color", "description", "createdAt", "updatedAt", "issues"],
    LabelCreateManyInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    LabelUpdateManyMutationInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    IssueStatusCreateInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "issues"],
    IssueStatusUpdateInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt", "issues"],
    IssueStatusCreateManyInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssueStatusUpdateManyMutationInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriorityCreateInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "issues"],
    IssuePriorityUpdateInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt", "issues"],
    IssuePriorityCreateManyInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePriorityUpdateManyMutationInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssueCreateInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueUpdateInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateManyInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueUpdateManyMutationInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt"],
    IssueLabelCreateInput: ["id", "issue", "label"],
    IssueLabelUpdateInput: ["id", "issue", "label"],
    IssueLabelCreateManyInput: ["id", "issueId", "labelId"],
    IssueLabelUpdateManyMutationInput: ["id"],
    CycleCreateInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team", "issues"],
    CycleUpdateInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team", "issues"],
    CycleCreateManyInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    CycleUpdateManyMutationInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    TeamCreateInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects", "cycles"],
    TeamUpdateInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects", "cycles"],
    TeamCreateManyInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamUpdateManyMutationInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMemberCreateInput: ["id", "team", "user"],
    TeamMemberUpdateInput: ["id", "team", "user"],
    TeamMemberCreateManyInput: ["id", "teamId", "userId"],
    TeamMemberUpdateManyMutationInput: ["id"],
    TeamProjectCreateInput: ["id", "team", "project"],
    TeamProjectUpdateInput: ["id", "team", "project"],
    TeamProjectCreateManyInput: ["id", "teamId", "projectId"],
    TeamProjectUpdateManyMutationInput: ["id"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    SubtaskListRelationFilter: ["every", "some", "none"],
    TaskDependencyListRelationFilter: ["every", "some", "none"],
    IssueListRelationFilter: ["every", "some", "none"],
    SortOrderInput: ["sort", "nulls"],
    SubtaskOrderByRelationAggregateInput: ["_count"],
    TaskDependencyOrderByRelationAggregateInput: ["_count"],
    IssueOrderByRelationAggregateInput: ["_count"],
    TaskCountOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    TaskAvgOrderByAggregateInput: ["id", "complexity"],
    TaskMaxOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    TaskMinOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt"],
    TaskSumOrderByAggregateInput: ["id", "complexity"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    TaskRelationFilter: ["is", "isNot"],
    SubtaskCountOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    SubtaskAvgOrderByAggregateInput: ["parentId"],
    SubtaskMaxOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    SubtaskMinOrderByAggregateInput: ["id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    SubtaskSumOrderByAggregateInput: ["parentId"],
    TaskDependencyTaskIdDependsOnIdCompoundUniqueInput: ["taskId", "dependsOnId"],
    TaskDependencyCountOrderByAggregateInput: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencyAvgOrderByAggregateInput: ["id", "taskId", "dependsOnId"],
    TaskDependencyMaxOrderByAggregateInput: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencyMinOrderByAggregateInput: ["id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencySumOrderByAggregateInput: ["id", "taskId", "dependsOnId"],
    TaskMasterMetadataCountOrderByAggregateInput: ["id", "created", "updated", "description"],
    TaskMasterMetadataAvgOrderByAggregateInput: ["id"],
    TaskMasterMetadataMaxOrderByAggregateInput: ["id", "created", "updated", "description"],
    TaskMasterMetadataMinOrderByAggregateInput: ["id", "created", "updated", "description"],
    TaskMasterMetadataSumOrderByAggregateInput: ["id"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    SyncOperationCountOrderByAggregateInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationAvgOrderByAggregateInput: ["retryCount", "maxRetries"],
    SyncOperationMaxOrderByAggregateInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationMinOrderByAggregateInput: ["id", "type", "status", "source", "timestamp", "completedAt", "data", "rollbackData", "metadata", "retryCount", "maxRetries", "error", "taskIds"],
    SyncOperationSumOrderByAggregateInput: ["retryCount", "maxRetries"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    BoolFilter: ["equals", "not"],
    SyncConflictCountOrderByAggregateInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictMaxOrderByAggregateInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    SyncConflictMinOrderByAggregateInput: ["id", "operationType", "taskId", "uiVersion", "cliVersion", "resolved", "resolution", "resolvedAt", "resolvedBy", "timestamp"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    TeamMemberListRelationFilter: ["every", "some", "none"],
    ProjectListRelationFilter: ["every", "some", "none"],
    TeamMemberOrderByRelationAggregateInput: ["_count"],
    ProjectOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt"],
    UserNullableRelationFilter: ["is", "isNot"],
    TeamProjectListRelationFilter: ["every", "some", "none"],
    TeamProjectOrderByRelationAggregateInput: ["_count"],
    ProjectCountOrderByAggregateInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    ProjectAvgOrderByAggregateInput: ["percentComplete"],
    ProjectMaxOrderByAggregateInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    ProjectMinOrderByAggregateInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    ProjectSumOrderByAggregateInput: ["percentComplete"],
    IssueLabelListRelationFilter: ["every", "some", "none"],
    IssueLabelOrderByRelationAggregateInput: ["_count"],
    LabelCountOrderByAggregateInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    LabelMaxOrderByAggregateInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    LabelMinOrderByAggregateInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    IssueStatusCountOrderByAggregateInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssueStatusMaxOrderByAggregateInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssueStatusMinOrderByAggregateInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriorityCountOrderByAggregateInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePriorityAvgOrderByAggregateInput: ["order"],
    IssuePriorityMaxOrderByAggregateInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePriorityMinOrderByAggregateInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePrioritySumOrderByAggregateInput: ["order"],
    ProjectNullableRelationFilter: ["is", "isNot"],
    CycleNullableRelationFilter: ["is", "isNot"],
    TaskNullableRelationFilter: ["is", "isNot"],
    SubtaskNullableRelationFilter: ["is", "isNot"],
    IssueStatusNullableRelationFilter: ["is", "isNot"],
    IssuePriorityNullableRelationFilter: ["is", "isNot"],
    IssueNullableRelationFilter: ["is", "isNot"],
    IssueCountOrderByAggregateInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueAvgOrderByAggregateInput: ["taskId"],
    IssueMaxOrderByAggregateInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueMinOrderByAggregateInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueSumOrderByAggregateInput: ["taskId"],
    IssueRelationFilter: ["is", "isNot"],
    LabelRelationFilter: ["is", "isNot"],
    IssueLabelIssueIdLabelIdCompoundUniqueInput: ["issueId", "labelId"],
    IssueLabelCountOrderByAggregateInput: ["id", "issueId", "labelId"],
    IssueLabelMaxOrderByAggregateInput: ["id", "issueId", "labelId"],
    IssueLabelMinOrderByAggregateInput: ["id", "issueId", "labelId"],
    TeamRelationFilter: ["is", "isNot"],
    CycleCountOrderByAggregateInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    CycleAvgOrderByAggregateInput: ["number", "progress"],
    CycleMaxOrderByAggregateInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    CycleMinOrderByAggregateInput: ["id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    CycleSumOrderByAggregateInput: ["number", "progress"],
    CycleListRelationFilter: ["every", "some", "none"],
    CycleOrderByRelationAggregateInput: ["_count"],
    TeamCountOrderByAggregateInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMaxOrderByAggregateInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    TeamMinOrderByAggregateInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt"],
    UserRelationFilter: ["is", "isNot"],
    TeamMemberTeamIdUserIdCompoundUniqueInput: ["teamId", "userId"],
    TeamMemberCountOrderByAggregateInput: ["id", "teamId", "userId"],
    TeamMemberMaxOrderByAggregateInput: ["id", "teamId", "userId"],
    TeamMemberMinOrderByAggregateInput: ["id", "teamId", "userId"],
    ProjectRelationFilter: ["is", "isNot"],
    TeamProjectTeamIdProjectIdCompoundUniqueInput: ["teamId", "projectId"],
    TeamProjectCountOrderByAggregateInput: ["id", "teamId", "projectId"],
    TeamProjectMaxOrderByAggregateInput: ["id", "teamId", "projectId"],
    TeamProjectMinOrderByAggregateInput: ["id", "teamId", "projectId"],
    SubtaskCreateNestedManyWithoutParentTaskInput: ["create", "connectOrCreate", "createMany", "connect"],
    TaskDependencyCreateNestedManyWithoutTaskInput: ["create", "connectOrCreate", "createMany", "connect"],
    TaskDependencyCreateNestedManyWithoutDependsOnInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueCreateNestedManyWithoutTaskInput: ["create", "connectOrCreate", "createMany", "connect"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    SubtaskUpdateManyWithoutParentTaskNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TaskDependencyUpdateManyWithoutTaskNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TaskDependencyUpdateManyWithoutDependsOnNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueUpdateManyWithoutTaskNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TaskCreateNestedOneWithoutSubtasksInput: ["create", "connectOrCreate", "connect"],
    IssueCreateNestedManyWithoutSubtaskInput: ["create", "connectOrCreate", "createMany", "connect"],
    TaskUpdateOneRequiredWithoutSubtasksNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    IssueUpdateManyWithoutSubtaskNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TaskCreateNestedOneWithoutDependenciesInput: ["create", "connectOrCreate", "connect"],
    TaskCreateNestedOneWithoutDependentsInput: ["create", "connectOrCreate", "connect"],
    TaskUpdateOneRequiredWithoutDependenciesNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TaskUpdateOneRequiredWithoutDependentsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    BoolFieldUpdateOperationsInput: ["set"],
    IssueCreateNestedManyWithoutAssigneeInput: ["create", "connectOrCreate", "createMany", "connect"],
    TeamMemberCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    ProjectCreateNestedManyWithoutLeadInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueUpdateManyWithoutAssigneeNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TeamMemberUpdateManyWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ProjectUpdateManyWithoutLeadNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserCreateNestedOneWithoutLedProjectsInput: ["create", "connectOrCreate", "connect"],
    TeamProjectCreateNestedManyWithoutProjectInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueUpdateManyWithoutProjectNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdateOneWithoutLedProjectsNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TeamProjectUpdateManyWithoutProjectNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueLabelCreateNestedManyWithoutLabelInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueLabelUpdateManyWithoutLabelNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueCreateNestedManyWithoutIssueStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueUpdateManyWithoutIssueStatusNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueCreateNestedManyWithoutIssuePriorityInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueUpdateManyWithoutIssuePriorityNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAssignedIssuesInput: ["create", "connectOrCreate", "connect"],
    ProjectCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    CycleCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    TaskCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    SubtaskCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    IssueStatusCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    IssuePriorityCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    IssueLabelCreateNestedManyWithoutIssueInput: ["create", "connectOrCreate", "createMany", "connect"],
    IssueCreateNestedOneWithoutSubIssuesInput: ["create", "connectOrCreate", "connect"],
    IssueCreateNestedManyWithoutParentIssueInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneWithoutAssignedIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ProjectUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CycleUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TaskUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SubtaskUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IssueStatusUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IssuePriorityUpdateOneWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IssueLabelUpdateManyWithoutIssueNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueUpdateOneWithoutSubIssuesNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    IssueUpdateManyWithoutParentIssueNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IssueCreateNestedOneWithoutLabelsInput: ["create", "connectOrCreate", "connect"],
    LabelCreateNestedOneWithoutIssuesInput: ["create", "connectOrCreate", "connect"],
    IssueUpdateOneRequiredWithoutLabelsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    LabelUpdateOneRequiredWithoutIssuesNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TeamCreateNestedOneWithoutCyclesInput: ["create", "connectOrCreate", "connect"],
    IssueCreateNestedManyWithoutCycleInput: ["create", "connectOrCreate", "createMany", "connect"],
    TeamUpdateOneRequiredWithoutCyclesNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    IssueUpdateManyWithoutCycleNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TeamMemberCreateNestedManyWithoutTeamInput: ["create", "connectOrCreate", "createMany", "connect"],
    TeamProjectCreateNestedManyWithoutTeamInput: ["create", "connectOrCreate", "createMany", "connect"],
    CycleCreateNestedManyWithoutTeamInput: ["create", "connectOrCreate", "createMany", "connect"],
    TeamMemberUpdateManyWithoutTeamNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TeamProjectUpdateManyWithoutTeamNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CycleUpdateManyWithoutTeamNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TeamCreateNestedOneWithoutMembersInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutTeamsInput: ["create", "connectOrCreate", "connect"],
    TeamUpdateOneRequiredWithoutMembersNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutTeamsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TeamCreateNestedOneWithoutProjectsInput: ["create", "connectOrCreate", "connect"],
    ProjectCreateNestedOneWithoutTeamsInput: ["create", "connectOrCreate", "connect"],
    TeamUpdateOneRequiredWithoutProjectsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ProjectUpdateOneRequiredWithoutTeamsNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    SubtaskCreateWithoutParentTaskInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "issues"],
    SubtaskCreateOrConnectWithoutParentTaskInput: ["where", "create"],
    SubtaskCreateManyParentTaskInputEnvelope: ["data"],
    TaskDependencyCreateWithoutTaskInput: ["createdAt", "dependsOn"],
    TaskDependencyCreateOrConnectWithoutTaskInput: ["where", "create"],
    TaskDependencyCreateManyTaskInputEnvelope: ["data"],
    TaskDependencyCreateWithoutDependsOnInput: ["createdAt", "task"],
    TaskDependencyCreateOrConnectWithoutDependsOnInput: ["where", "create"],
    TaskDependencyCreateManyDependsOnInputEnvelope: ["data"],
    IssueCreateWithoutTaskInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutTaskInput: ["where", "create"],
    IssueCreateManyTaskInputEnvelope: ["data"],
    SubtaskUpsertWithWhereUniqueWithoutParentTaskInput: ["where", "update", "create"],
    SubtaskUpdateWithWhereUniqueWithoutParentTaskInput: ["where", "data"],
    SubtaskUpdateManyWithWhereWithoutParentTaskInput: ["where", "data"],
    SubtaskScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "details", "testStrategy", "status", "parentId", "dependencies", "createdAt", "updatedAt"],
    TaskDependencyUpsertWithWhereUniqueWithoutTaskInput: ["where", "update", "create"],
    TaskDependencyUpdateWithWhereUniqueWithoutTaskInput: ["where", "data"],
    TaskDependencyUpdateManyWithWhereWithoutTaskInput: ["where", "data"],
    TaskDependencyScalarWhereInput: ["AND", "OR", "NOT", "id", "taskId", "dependsOnId", "createdAt"],
    TaskDependencyUpsertWithWhereUniqueWithoutDependsOnInput: ["where", "update", "create"],
    TaskDependencyUpdateWithWhereUniqueWithoutDependsOnInput: ["where", "data"],
    TaskDependencyUpdateManyWithWhereWithoutDependsOnInput: ["where", "data"],
    IssueUpsertWithWhereUniqueWithoutTaskInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutTaskInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutTaskInput: ["where", "data"],
    IssueScalarWhereInput: ["AND", "OR", "NOT", "id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    TaskCreateWithoutSubtasksInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "dependencies", "dependents", "issues"],
    TaskCreateOrConnectWithoutSubtasksInput: ["where", "create"],
    IssueCreateWithoutSubtaskInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutSubtaskInput: ["where", "create"],
    IssueCreateManySubtaskInputEnvelope: ["data"],
    TaskUpsertWithoutSubtasksInput: ["update", "create", "where"],
    TaskUpdateToOneWithWhereWithoutSubtasksInput: ["where", "data"],
    TaskUpdateWithoutSubtasksInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "dependencies", "dependents", "issues"],
    IssueUpsertWithWhereUniqueWithoutSubtaskInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutSubtaskInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutSubtaskInput: ["where", "data"],
    TaskCreateWithoutDependenciesInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependents", "issues"],
    TaskCreateOrConnectWithoutDependenciesInput: ["where", "create"],
    TaskCreateWithoutDependentsInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "issues"],
    TaskCreateOrConnectWithoutDependentsInput: ["where", "create"],
    TaskUpsertWithoutDependenciesInput: ["update", "create", "where"],
    TaskUpdateToOneWithWhereWithoutDependenciesInput: ["where", "data"],
    TaskUpdateWithoutDependenciesInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependents", "issues"],
    TaskUpsertWithoutDependentsInput: ["update", "create", "where"],
    TaskUpdateToOneWithWhereWithoutDependentsInput: ["where", "data"],
    TaskUpdateWithoutDependentsInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "issues"],
    IssueCreateWithoutAssigneeInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutAssigneeInput: ["where", "create"],
    IssueCreateManyAssigneeInputEnvelope: ["data"],
    TeamMemberCreateWithoutUserInput: ["id", "team"],
    TeamMemberCreateOrConnectWithoutUserInput: ["where", "create"],
    TeamMemberCreateManyUserInputEnvelope: ["data"],
    ProjectCreateWithoutLeadInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "teams"],
    ProjectCreateOrConnectWithoutLeadInput: ["where", "create"],
    ProjectCreateManyLeadInputEnvelope: ["data"],
    IssueUpsertWithWhereUniqueWithoutAssigneeInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutAssigneeInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutAssigneeInput: ["where", "data"],
    TeamMemberUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    TeamMemberUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    TeamMemberUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    TeamMemberScalarWhereInput: ["AND", "OR", "NOT", "id", "teamId", "userId"],
    ProjectUpsertWithWhereUniqueWithoutLeadInput: ["where", "update", "create"],
    ProjectUpdateWithWhereUniqueWithoutLeadInput: ["where", "data"],
    ProjectUpdateManyWithWhereWithoutLeadInput: ["where", "data"],
    ProjectScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "leadId", "createdAt", "updatedAt"],
    IssueCreateWithoutProjectInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutProjectInput: ["where", "create"],
    IssueCreateManyProjectInputEnvelope: ["data"],
    UserCreateWithoutLedProjectsInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams"],
    UserCreateOrConnectWithoutLedProjectsInput: ["where", "create"],
    TeamProjectCreateWithoutProjectInput: ["id", "team"],
    TeamProjectCreateOrConnectWithoutProjectInput: ["where", "create"],
    TeamProjectCreateManyProjectInputEnvelope: ["data"],
    IssueUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
    UserUpsertWithoutLedProjectsInput: ["update", "create", "where"],
    UserUpdateToOneWithWhereWithoutLedProjectsInput: ["where", "data"],
    UserUpdateWithoutLedProjectsInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "teams"],
    TeamProjectUpsertWithWhereUniqueWithoutProjectInput: ["where", "update", "create"],
    TeamProjectUpdateWithWhereUniqueWithoutProjectInput: ["where", "data"],
    TeamProjectUpdateManyWithWhereWithoutProjectInput: ["where", "data"],
    TeamProjectScalarWhereInput: ["AND", "OR", "NOT", "id", "teamId", "projectId"],
    IssueLabelCreateWithoutLabelInput: ["id", "issue"],
    IssueLabelCreateOrConnectWithoutLabelInput: ["where", "create"],
    IssueLabelCreateManyLabelInputEnvelope: ["data"],
    IssueLabelUpsertWithWhereUniqueWithoutLabelInput: ["where", "update", "create"],
    IssueLabelUpdateWithWhereUniqueWithoutLabelInput: ["where", "data"],
    IssueLabelUpdateManyWithWhereWithoutLabelInput: ["where", "data"],
    IssueLabelScalarWhereInput: ["AND", "OR", "NOT", "id", "issueId", "labelId"],
    IssueCreateWithoutIssueStatusInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutIssueStatusInput: ["where", "create"],
    IssueCreateManyIssueStatusInputEnvelope: ["data"],
    IssueUpsertWithWhereUniqueWithoutIssueStatusInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutIssueStatusInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutIssueStatusInput: ["where", "data"],
    IssueCreateWithoutIssuePriorityInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutIssuePriorityInput: ["where", "create"],
    IssueCreateManyIssuePriorityInputEnvelope: ["data"],
    IssueUpsertWithWhereUniqueWithoutIssuePriorityInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutIssuePriorityInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutIssuePriorityInput: ["where", "data"],
    UserCreateWithoutAssignedIssuesInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "teams", "ledProjects"],
    UserCreateOrConnectWithoutAssignedIssuesInput: ["where", "create"],
    ProjectCreateWithoutIssuesInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "lead", "teams"],
    ProjectCreateOrConnectWithoutIssuesInput: ["where", "create"],
    CycleCreateWithoutIssuesInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team"],
    CycleCreateOrConnectWithoutIssuesInput: ["where", "create"],
    TaskCreateWithoutIssuesInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents"],
    TaskCreateOrConnectWithoutIssuesInput: ["where", "create"],
    SubtaskCreateWithoutIssuesInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "parentTask"],
    SubtaskCreateOrConnectWithoutIssuesInput: ["where", "create"],
    IssueStatusCreateWithoutIssuesInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssueStatusCreateOrConnectWithoutIssuesInput: ["where", "create"],
    IssuePriorityCreateWithoutIssuesInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssuePriorityCreateOrConnectWithoutIssuesInput: ["where", "create"],
    IssueLabelCreateWithoutIssueInput: ["id", "label"],
    IssueLabelCreateOrConnectWithoutIssueInput: ["where", "create"],
    IssueLabelCreateManyIssueInputEnvelope: ["data"],
    IssueCreateWithoutSubIssuesInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue"],
    IssueCreateOrConnectWithoutSubIssuesInput: ["where", "create"],
    IssueCreateWithoutParentIssueInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "subIssues"],
    IssueCreateOrConnectWithoutParentIssueInput: ["where", "create"],
    IssueCreateManyParentIssueInputEnvelope: ["data"],
    UserUpsertWithoutAssignedIssuesInput: ["update", "create", "where"],
    UserUpdateToOneWithWhereWithoutAssignedIssuesInput: ["where", "data"],
    UserUpdateWithoutAssignedIssuesInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "teams", "ledProjects"],
    ProjectUpsertWithoutIssuesInput: ["update", "create", "where"],
    ProjectUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    ProjectUpdateWithoutIssuesInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "lead", "teams"],
    CycleUpsertWithoutIssuesInput: ["update", "create", "where"],
    CycleUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    CycleUpdateWithoutIssuesInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "team"],
    TaskUpsertWithoutIssuesInput: ["update", "create", "where"],
    TaskUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    TaskUpdateWithoutIssuesInput: ["id", "title", "description", "details", "testStrategy", "priority", "status", "complexity", "createdAt", "updatedAt", "subtasks", "dependencies", "dependents"],
    SubtaskUpsertWithoutIssuesInput: ["update", "create", "where"],
    SubtaskUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    SubtaskUpdateWithoutIssuesInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "parentTask"],
    IssueStatusUpsertWithoutIssuesInput: ["update", "create", "where"],
    IssueStatusUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    IssueStatusUpdateWithoutIssuesInput: ["id", "name", "color", "iconName", "createdAt", "updatedAt"],
    IssuePriorityUpsertWithoutIssuesInput: ["update", "create", "where"],
    IssuePriorityUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    IssuePriorityUpdateWithoutIssuesInput: ["id", "name", "iconName", "order", "createdAt", "updatedAt"],
    IssueLabelUpsertWithWhereUniqueWithoutIssueInput: ["where", "update", "create"],
    IssueLabelUpdateWithWhereUniqueWithoutIssueInput: ["where", "data"],
    IssueLabelUpdateManyWithWhereWithoutIssueInput: ["where", "data"],
    IssueUpsertWithoutSubIssuesInput: ["update", "create", "where"],
    IssueUpdateToOneWithWhereWithoutSubIssuesInput: ["where", "data"],
    IssueUpdateWithoutSubIssuesInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue"],
    IssueUpsertWithWhereUniqueWithoutParentIssueInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutParentIssueInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutParentIssueInput: ["where", "data"],
    IssueCreateWithoutLabelsInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutLabelsInput: ["where", "create"],
    LabelCreateWithoutIssuesInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    LabelCreateOrConnectWithoutIssuesInput: ["where", "create"],
    IssueUpsertWithoutLabelsInput: ["update", "create", "where"],
    IssueUpdateToOneWithWhereWithoutLabelsInput: ["where", "data"],
    IssueUpdateWithoutLabelsInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "parentIssue", "subIssues"],
    LabelUpsertWithoutIssuesInput: ["update", "create", "where"],
    LabelUpdateToOneWithWhereWithoutIssuesInput: ["where", "data"],
    LabelUpdateWithoutIssuesInput: ["id", "name", "color", "description", "createdAt", "updatedAt"],
    TeamCreateWithoutCyclesInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects"],
    TeamCreateOrConnectWithoutCyclesInput: ["where", "create"],
    IssueCreateWithoutCycleInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateOrConnectWithoutCycleInput: ["where", "create"],
    IssueCreateManyCycleInputEnvelope: ["data"],
    TeamUpsertWithoutCyclesInput: ["update", "create", "where"],
    TeamUpdateToOneWithWhereWithoutCyclesInput: ["where", "data"],
    TeamUpdateWithoutCyclesInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "projects"],
    IssueUpsertWithWhereUniqueWithoutCycleInput: ["where", "update", "create"],
    IssueUpdateWithWhereUniqueWithoutCycleInput: ["where", "data"],
    IssueUpdateManyWithWhereWithoutCycleInput: ["where", "data"],
    TeamMemberCreateWithoutTeamInput: ["id", "user"],
    TeamMemberCreateOrConnectWithoutTeamInput: ["where", "create"],
    TeamMemberCreateManyTeamInputEnvelope: ["data"],
    TeamProjectCreateWithoutTeamInput: ["id", "project"],
    TeamProjectCreateOrConnectWithoutTeamInput: ["where", "create"],
    TeamProjectCreateManyTeamInputEnvelope: ["data"],
    CycleCreateWithoutTeamInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "issues"],
    CycleCreateOrConnectWithoutTeamInput: ["where", "create"],
    CycleCreateManyTeamInputEnvelope: ["data"],
    TeamMemberUpsertWithWhereUniqueWithoutTeamInput: ["where", "update", "create"],
    TeamMemberUpdateWithWhereUniqueWithoutTeamInput: ["where", "data"],
    TeamMemberUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
    TeamProjectUpsertWithWhereUniqueWithoutTeamInput: ["where", "update", "create"],
    TeamProjectUpdateWithWhereUniqueWithoutTeamInput: ["where", "data"],
    TeamProjectUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
    CycleUpsertWithWhereUniqueWithoutTeamInput: ["where", "update", "create"],
    CycleUpdateWithWhereUniqueWithoutTeamInput: ["where", "data"],
    CycleUpdateManyWithWhereWithoutTeamInput: ["where", "data"],
    CycleScalarWhereInput: ["AND", "OR", "NOT", "id", "number", "name", "teamId", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    TeamCreateWithoutMembersInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "projects", "cycles"],
    TeamCreateOrConnectWithoutMembersInput: ["where", "create"],
    UserCreateWithoutTeamsInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "ledProjects"],
    UserCreateOrConnectWithoutTeamsInput: ["where", "create"],
    TeamUpsertWithoutMembersInput: ["update", "create", "where"],
    TeamUpdateToOneWithWhereWithoutMembersInput: ["where", "data"],
    TeamUpdateWithoutMembersInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "projects", "cycles"],
    UserUpsertWithoutTeamsInput: ["update", "create", "where"],
    UserUpdateToOneWithWhereWithoutTeamsInput: ["where", "data"],
    UserUpdateWithoutTeamsInput: ["id", "name", "email", "avatarUrl", "status", "role", "joinedDate", "teamIds", "createdAt", "updatedAt", "assignedIssues", "ledProjects"],
    TeamCreateWithoutProjectsInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "cycles"],
    TeamCreateOrConnectWithoutProjectsInput: ["where", "create"],
    ProjectCreateWithoutTeamsInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "lead"],
    ProjectCreateOrConnectWithoutTeamsInput: ["where", "create"],
    TeamUpsertWithoutProjectsInput: ["update", "create", "where"],
    TeamUpdateToOneWithWhereWithoutProjectsInput: ["where", "data"],
    TeamUpdateWithoutProjectsInput: ["id", "name", "icon", "joined", "color", "createdAt", "updatedAt", "members", "cycles"],
    ProjectUpsertWithoutTeamsInput: ["update", "create", "where"],
    ProjectUpdateToOneWithWhereWithoutTeamsInput: ["where", "data"],
    ProjectUpdateWithoutTeamsInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "lead"],
    SubtaskCreateManyParentTaskInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt"],
    TaskDependencyCreateManyTaskInput: ["id", "dependsOnId", "createdAt"],
    TaskDependencyCreateManyDependsOnInput: ["id", "taskId", "createdAt"],
    IssueCreateManyTaskInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    SubtaskUpdateWithoutParentTaskInput: ["id", "title", "description", "details", "testStrategy", "status", "dependencies", "createdAt", "updatedAt", "issues"],
    TaskDependencyUpdateWithoutTaskInput: ["createdAt", "dependsOn"],
    TaskDependencyUpdateWithoutDependsOnInput: ["createdAt", "task"],
    IssueUpdateWithoutTaskInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateManySubtaskInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueUpdateWithoutSubtaskInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateManyAssigneeInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "projectId", "createdAt", "updatedAt"],
    TeamMemberCreateManyUserInput: ["id", "teamId"],
    ProjectCreateManyLeadInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt"],
    IssueUpdateWithoutAssigneeInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    TeamMemberUpdateWithoutUserInput: ["id", "team"],
    ProjectUpdateWithoutLeadInput: ["id", "name", "description", "color", "identifier", "icon", "percentComplete", "startDate", "health", "createdAt", "updatedAt", "issues", "teams"],
    IssueCreateManyProjectInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "createdAt", "updatedAt"],
    TeamProjectCreateManyProjectInput: ["id", "teamId"],
    IssueUpdateWithoutProjectInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    TeamProjectUpdateWithoutProjectInput: ["id", "team"],
    IssueLabelCreateManyLabelInput: ["id", "issueId"],
    IssueLabelUpdateWithoutLabelInput: ["id", "issue"],
    IssueCreateManyIssueStatusInput: ["id", "identifier", "title", "description", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueUpdateWithoutIssueStatusInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issuePriority", "labels", "parentIssue", "subIssues"],
    IssueCreateManyIssuePriorityInput: ["id", "identifier", "title", "description", "statusId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueUpdateWithoutIssuePriorityInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "labels", "parentIssue", "subIssues"],
    IssueLabelCreateManyIssueInput: ["id", "labelId"],
    IssueCreateManyParentIssueInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "cycleId", "dueDate", "taskId", "subtaskId", "issueType", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueLabelUpdateWithoutIssueInput: ["id", "label"],
    IssueUpdateWithoutParentIssueInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "cycle", "task", "subtask", "issueStatus", "issuePriority", "labels", "subIssues"],
    IssueCreateManyCycleInput: ["id", "identifier", "title", "description", "statusId", "priorityId", "status", "priority", "rank", "dueDate", "taskId", "subtaskId", "issueType", "parentIssueId", "assigneeId", "projectId", "createdAt", "updatedAt"],
    IssueUpdateWithoutCycleInput: ["id", "identifier", "title", "description", "status", "priority", "rank", "dueDate", "issueType", "createdAt", "updatedAt", "assignee", "project", "task", "subtask", "issueStatus", "issuePriority", "labels", "parentIssue", "subIssues"],
    TeamMemberCreateManyTeamInput: ["id", "userId"],
    TeamProjectCreateManyTeamInput: ["id", "projectId"],
    CycleCreateManyTeamInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt"],
    TeamMemberUpdateWithoutTeamInput: ["id", "user"],
    TeamProjectUpdateWithoutTeamInput: ["id", "project"],
    CycleUpdateWithoutTeamInput: ["id", "number", "name", "startDate", "endDate", "progress", "createdAt", "updatedAt", "issues"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
