import type { GraphQLResolveInfo } from "graphql";
import { AggregateLabelArgs } from "./args/AggregateLabelArgs";
import { CreateManyAndReturnLabelArgs } from "./args/CreateManyAndReturnLabelArgs";
import { CreateManyLabelArgs } from "./args/CreateManyLabelArgs";
import { CreateOneLabelArgs } from "./args/CreateOneLabelArgs";
import { DeleteManyLabelArgs } from "./args/DeleteManyLabelArgs";
import { DeleteOneLabelArgs } from "./args/DeleteOneLabelArgs";
import { FindFirstLabelArgs } from "./args/FindFirstLabelArgs";
import { FindFirstLabelOrThrowArgs } from "./args/FindFirstLabelOrThrowArgs";
import { FindManyLabelArgs } from "./args/FindManyLabelArgs";
import { FindUniqueLabelArgs } from "./args/FindUniqueLabelArgs";
import { FindUniqueLabelOrThrowArgs } from "./args/FindUniqueLabelOrThrowArgs";
import { GroupByLabelArgs } from "./args/GroupByLabelArgs";
import { UpdateManyLabelArgs } from "./args/UpdateManyLabelArgs";
import { UpdateOneLabelArgs } from "./args/UpdateOneLabelArgs";
import { UpsertOneLabelArgs } from "./args/UpsertOneLabelArgs";
import { Label } from "../../../models/Label";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateLabel } from "../../outputs/AggregateLabel";
import { CreateManyAndReturnLabel } from "../../outputs/CreateManyAndReturnLabel";
import { LabelGroupBy } from "../../outputs/LabelGroupBy";
export declare class LabelCrudResolver {
    aggregateLabel(ctx: any, info: GraphQLResolveInfo, args: AggregateLabelArgs): Promise<AggregateLabel>;
    createManyLabel(ctx: any, info: GraphQLResolveInfo, args: CreateManyLabelArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnLabel(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnLabelArgs): Promise<CreateManyAndReturnLabel[]>;
    createOneLabel(ctx: any, info: GraphQLResolveInfo, args: CreateOneLabelArgs): Promise<Label>;
    deleteManyLabel(ctx: any, info: GraphQLResolveInfo, args: DeleteManyLabelArgs): Promise<AffectedRowsOutput>;
    deleteOneLabel(ctx: any, info: GraphQLResolveInfo, args: DeleteOneLabelArgs): Promise<Label | null>;
    findFirstLabel(ctx: any, info: GraphQLResolveInfo, args: FindFirstLabelArgs): Promise<Label | null>;
    findFirstLabelOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstLabelOrThrowArgs): Promise<Label | null>;
    labels(ctx: any, info: GraphQLResolveInfo, args: FindManyLabelArgs): Promise<Label[]>;
    label(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLabelArgs): Promise<Label | null>;
    getLabel(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLabelOrThrowArgs): Promise<Label | null>;
    groupByLabel(ctx: any, info: GraphQLResolveInfo, args: GroupByLabelArgs): Promise<LabelGroupBy[]>;
    updateManyLabel(ctx: any, info: GraphQLResolveInfo, args: UpdateManyLabelArgs): Promise<AffectedRowsOutput>;
    updateOneLabel(ctx: any, info: GraphQLResolveInfo, args: UpdateOneLabelArgs): Promise<Label | null>;
    upsertOneLabel(ctx: any, info: GraphQLResolveInfo, args: UpsertOneLabelArgs): Promise<Label>;
}
