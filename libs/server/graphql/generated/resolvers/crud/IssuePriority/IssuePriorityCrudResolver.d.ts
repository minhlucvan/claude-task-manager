import type { GraphQLResolveInfo } from "graphql";
import { AggregateIssuePriorityArgs } from "./args/AggregateIssuePriorityArgs";
import { CreateManyAndReturnIssuePriorityArgs } from "./args/CreateManyAndReturnIssuePriorityArgs";
import { CreateManyIssuePriorityArgs } from "./args/CreateManyIssuePriorityArgs";
import { CreateOneIssuePriorityArgs } from "./args/CreateOneIssuePriorityArgs";
import { DeleteManyIssuePriorityArgs } from "./args/DeleteManyIssuePriorityArgs";
import { DeleteOneIssuePriorityArgs } from "./args/DeleteOneIssuePriorityArgs";
import { FindFirstIssuePriorityArgs } from "./args/FindFirstIssuePriorityArgs";
import { FindFirstIssuePriorityOrThrowArgs } from "./args/FindFirstIssuePriorityOrThrowArgs";
import { FindManyIssuePriorityArgs } from "./args/FindManyIssuePriorityArgs";
import { FindUniqueIssuePriorityArgs } from "./args/FindUniqueIssuePriorityArgs";
import { FindUniqueIssuePriorityOrThrowArgs } from "./args/FindUniqueIssuePriorityOrThrowArgs";
import { GroupByIssuePriorityArgs } from "./args/GroupByIssuePriorityArgs";
import { UpdateManyIssuePriorityArgs } from "./args/UpdateManyIssuePriorityArgs";
import { UpdateOneIssuePriorityArgs } from "./args/UpdateOneIssuePriorityArgs";
import { UpsertOneIssuePriorityArgs } from "./args/UpsertOneIssuePriorityArgs";
import { IssuePriority } from "../../../models/IssuePriority";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateIssuePriority } from "../../outputs/AggregateIssuePriority";
import { CreateManyAndReturnIssuePriority } from "../../outputs/CreateManyAndReturnIssuePriority";
import { IssuePriorityGroupBy } from "../../outputs/IssuePriorityGroupBy";
export declare class IssuePriorityCrudResolver {
    aggregateIssuePriority(ctx: any, info: GraphQLResolveInfo, args: AggregateIssuePriorityArgs): Promise<AggregateIssuePriority>;
    createManyIssuePriority(ctx: any, info: GraphQLResolveInfo, args: CreateManyIssuePriorityArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnIssuePriority(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnIssuePriorityArgs): Promise<CreateManyAndReturnIssuePriority[]>;
    createOneIssuePriority(ctx: any, info: GraphQLResolveInfo, args: CreateOneIssuePriorityArgs): Promise<IssuePriority>;
    deleteManyIssuePriority(ctx: any, info: GraphQLResolveInfo, args: DeleteManyIssuePriorityArgs): Promise<AffectedRowsOutput>;
    deleteOneIssuePriority(ctx: any, info: GraphQLResolveInfo, args: DeleteOneIssuePriorityArgs): Promise<IssuePriority | null>;
    findFirstIssuePriority(ctx: any, info: GraphQLResolveInfo, args: FindFirstIssuePriorityArgs): Promise<IssuePriority | null>;
    findFirstIssuePriorityOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstIssuePriorityOrThrowArgs): Promise<IssuePriority | null>;
    issuePriorities(ctx: any, info: GraphQLResolveInfo, args: FindManyIssuePriorityArgs): Promise<IssuePriority[]>;
    issuePriority(ctx: any, info: GraphQLResolveInfo, args: FindUniqueIssuePriorityArgs): Promise<IssuePriority | null>;
    getIssuePriority(ctx: any, info: GraphQLResolveInfo, args: FindUniqueIssuePriorityOrThrowArgs): Promise<IssuePriority | null>;
    groupByIssuePriority(ctx: any, info: GraphQLResolveInfo, args: GroupByIssuePriorityArgs): Promise<IssuePriorityGroupBy[]>;
    updateManyIssuePriority(ctx: any, info: GraphQLResolveInfo, args: UpdateManyIssuePriorityArgs): Promise<AffectedRowsOutput>;
    updateOneIssuePriority(ctx: any, info: GraphQLResolveInfo, args: UpdateOneIssuePriorityArgs): Promise<IssuePriority | null>;
    upsertOneIssuePriority(ctx: any, info: GraphQLResolveInfo, args: UpsertOneIssuePriorityArgs): Promise<IssuePriority>;
}
