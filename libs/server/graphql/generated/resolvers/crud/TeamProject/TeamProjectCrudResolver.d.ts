import type { GraphQLResolveInfo } from "graphql";
import { AggregateTeamProjectArgs } from "./args/AggregateTeamProjectArgs";
import { CreateManyAndReturnTeamProjectArgs } from "./args/CreateManyAndReturnTeamProjectArgs";
import { CreateManyTeamProjectArgs } from "./args/CreateManyTeamProjectArgs";
import { CreateOneTeamProjectArgs } from "./args/CreateOneTeamProjectArgs";
import { DeleteManyTeamProjectArgs } from "./args/DeleteManyTeamProjectArgs";
import { DeleteOneTeamProjectArgs } from "./args/DeleteOneTeamProjectArgs";
import { FindFirstTeamProjectArgs } from "./args/FindFirstTeamProjectArgs";
import { FindFirstTeamProjectOrThrowArgs } from "./args/FindFirstTeamProjectOrThrowArgs";
import { FindManyTeamProjectArgs } from "./args/FindManyTeamProjectArgs";
import { FindUniqueTeamProjectArgs } from "./args/FindUniqueTeamProjectArgs";
import { FindUniqueTeamProjectOrThrowArgs } from "./args/FindUniqueTeamProjectOrThrowArgs";
import { GroupByTeamProjectArgs } from "./args/GroupByTeamProjectArgs";
import { UpdateManyTeamProjectArgs } from "./args/UpdateManyTeamProjectArgs";
import { UpdateOneTeamProjectArgs } from "./args/UpdateOneTeamProjectArgs";
import { UpsertOneTeamProjectArgs } from "./args/UpsertOneTeamProjectArgs";
import { TeamProject } from "../../../models/TeamProject";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTeamProject } from "../../outputs/AggregateTeamProject";
import { CreateManyAndReturnTeamProject } from "../../outputs/CreateManyAndReturnTeamProject";
import { TeamProjectGroupBy } from "../../outputs/TeamProjectGroupBy";
export declare class TeamProjectCrudResolver {
    aggregateTeamProject(ctx: any, info: GraphQLResolveInfo, args: AggregateTeamProjectArgs): Promise<AggregateTeamProject>;
    createManyTeamProject(ctx: any, info: GraphQLResolveInfo, args: CreateManyTeamProjectArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnTeamProject(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnTeamProjectArgs): Promise<CreateManyAndReturnTeamProject[]>;
    createOneTeamProject(ctx: any, info: GraphQLResolveInfo, args: CreateOneTeamProjectArgs): Promise<TeamProject>;
    deleteManyTeamProject(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTeamProjectArgs): Promise<AffectedRowsOutput>;
    deleteOneTeamProject(ctx: any, info: GraphQLResolveInfo, args: DeleteOneTeamProjectArgs): Promise<TeamProject | null>;
    findFirstTeamProject(ctx: any, info: GraphQLResolveInfo, args: FindFirstTeamProjectArgs): Promise<TeamProject | null>;
    findFirstTeamProjectOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstTeamProjectOrThrowArgs): Promise<TeamProject | null>;
    teamProjects(ctx: any, info: GraphQLResolveInfo, args: FindManyTeamProjectArgs): Promise<TeamProject[]>;
    teamProject(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTeamProjectArgs): Promise<TeamProject | null>;
    getTeamProject(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTeamProjectOrThrowArgs): Promise<TeamProject | null>;
    groupByTeamProject(ctx: any, info: GraphQLResolveInfo, args: GroupByTeamProjectArgs): Promise<TeamProjectGroupBy[]>;
    updateManyTeamProject(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTeamProjectArgs): Promise<AffectedRowsOutput>;
    updateOneTeamProject(ctx: any, info: GraphQLResolveInfo, args: UpdateOneTeamProjectArgs): Promise<TeamProject | null>;
    upsertOneTeamProject(ctx: any, info: GraphQLResolveInfo, args: UpsertOneTeamProjectArgs): Promise<TeamProject>;
}
