import type { GraphQLResolveInfo } from "graphql";
import { AggregateTeamArgs } from "./args/AggregateTeamArgs";
import { CreateManyAndReturnTeamArgs } from "./args/CreateManyAndReturnTeamArgs";
import { CreateManyTeamArgs } from "./args/CreateManyTeamArgs";
import { CreateOneTeamArgs } from "./args/CreateOneTeamArgs";
import { DeleteManyTeamArgs } from "./args/DeleteManyTeamArgs";
import { DeleteOneTeamArgs } from "./args/DeleteOneTeamArgs";
import { FindFirstTeamArgs } from "./args/FindFirstTeamArgs";
import { FindFirstTeamOrThrowArgs } from "./args/FindFirstTeamOrThrowArgs";
import { FindManyTeamArgs } from "./args/FindManyTeamArgs";
import { FindUniqueTeamArgs } from "./args/FindUniqueTeamArgs";
import { FindUniqueTeamOrThrowArgs } from "./args/FindUniqueTeamOrThrowArgs";
import { GroupByTeamArgs } from "./args/GroupByTeamArgs";
import { UpdateManyTeamArgs } from "./args/UpdateManyTeamArgs";
import { UpdateOneTeamArgs } from "./args/UpdateOneTeamArgs";
import { UpsertOneTeamArgs } from "./args/UpsertOneTeamArgs";
import { Team } from "../../../models/Team";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTeam } from "../../outputs/AggregateTeam";
import { CreateManyAndReturnTeam } from "../../outputs/CreateManyAndReturnTeam";
import { TeamGroupBy } from "../../outputs/TeamGroupBy";
export declare class TeamCrudResolver {
    aggregateTeam(ctx: any, info: GraphQLResolveInfo, args: AggregateTeamArgs): Promise<AggregateTeam>;
    createManyTeam(ctx: any, info: GraphQLResolveInfo, args: CreateManyTeamArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnTeam(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnTeamArgs): Promise<CreateManyAndReturnTeam[]>;
    createOneTeam(ctx: any, info: GraphQLResolveInfo, args: CreateOneTeamArgs): Promise<Team>;
    deleteManyTeam(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTeamArgs): Promise<AffectedRowsOutput>;
    deleteOneTeam(ctx: any, info: GraphQLResolveInfo, args: DeleteOneTeamArgs): Promise<Team | null>;
    findFirstTeam(ctx: any, info: GraphQLResolveInfo, args: FindFirstTeamArgs): Promise<Team | null>;
    findFirstTeamOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstTeamOrThrowArgs): Promise<Team | null>;
    teams(ctx: any, info: GraphQLResolveInfo, args: FindManyTeamArgs): Promise<Team[]>;
    team(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTeamArgs): Promise<Team | null>;
    getTeam(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTeamOrThrowArgs): Promise<Team | null>;
    groupByTeam(ctx: any, info: GraphQLResolveInfo, args: GroupByTeamArgs): Promise<TeamGroupBy[]>;
    updateManyTeam(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTeamArgs): Promise<AffectedRowsOutput>;
    updateOneTeam(ctx: any, info: GraphQLResolveInfo, args: UpdateOneTeamArgs): Promise<Team | null>;
    upsertOneTeam(ctx: any, info: GraphQLResolveInfo, args: UpsertOneTeamArgs): Promise<Team>;
}
