import type { GraphQLResolveInfo } from "graphql";
import { AggregateTaskArgs } from "./args/AggregateTaskArgs";
import { CreateManyAndReturnTaskArgs } from "./args/CreateManyAndReturnTaskArgs";
import { CreateManyTaskArgs } from "./args/CreateManyTaskArgs";
import { CreateOneTaskArgs } from "./args/CreateOneTaskArgs";
import { DeleteManyTaskArgs } from "./args/DeleteManyTaskArgs";
import { DeleteOneTaskArgs } from "./args/DeleteOneTaskArgs";
import { FindFirstTaskArgs } from "./args/FindFirstTaskArgs";
import { FindFirstTaskOrThrowArgs } from "./args/FindFirstTaskOrThrowArgs";
import { FindManyTaskArgs } from "./args/FindManyTaskArgs";
import { FindUniqueTaskArgs } from "./args/FindUniqueTaskArgs";
import { FindUniqueTaskOrThrowArgs } from "./args/FindUniqueTaskOrThrowArgs";
import { GroupByTaskArgs } from "./args/GroupByTaskArgs";
import { UpdateManyTaskArgs } from "./args/UpdateManyTaskArgs";
import { UpdateOneTaskArgs } from "./args/UpdateOneTaskArgs";
import { UpsertOneTaskArgs } from "./args/UpsertOneTaskArgs";
import { Task } from "../../../models/Task";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTask } from "../../outputs/AggregateTask";
import { CreateManyAndReturnTask } from "../../outputs/CreateManyAndReturnTask";
import { TaskGroupBy } from "../../outputs/TaskGroupBy";
export declare class TaskCrudResolver {
    aggregateTask(ctx: any, info: GraphQLResolveInfo, args: AggregateTaskArgs): Promise<AggregateTask>;
    createManyTask(ctx: any, info: GraphQLResolveInfo, args: CreateManyTaskArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnTask(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnTaskArgs): Promise<CreateManyAndReturnTask[]>;
    createOneTask(ctx: any, info: GraphQLResolveInfo, args: CreateOneTaskArgs): Promise<Task>;
    deleteManyTask(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTaskArgs): Promise<AffectedRowsOutput>;
    deleteOneTask(ctx: any, info: GraphQLResolveInfo, args: DeleteOneTaskArgs): Promise<Task | null>;
    findFirstTask(ctx: any, info: GraphQLResolveInfo, args: FindFirstTaskArgs): Promise<Task | null>;
    findFirstTaskOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstTaskOrThrowArgs): Promise<Task | null>;
    tasks(ctx: any, info: GraphQLResolveInfo, args: FindManyTaskArgs): Promise<Task[]>;
    task(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTaskArgs): Promise<Task | null>;
    getTask(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTaskOrThrowArgs): Promise<Task | null>;
    groupByTask(ctx: any, info: GraphQLResolveInfo, args: GroupByTaskArgs): Promise<TaskGroupBy[]>;
    updateManyTask(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTaskArgs): Promise<AffectedRowsOutput>;
    updateOneTask(ctx: any, info: GraphQLResolveInfo, args: UpdateOneTaskArgs): Promise<Task | null>;
    upsertOneTask(ctx: any, info: GraphQLResolveInfo, args: UpsertOneTaskArgs): Promise<Task>;
}
