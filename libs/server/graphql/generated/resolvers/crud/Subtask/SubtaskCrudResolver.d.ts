import type { GraphQLResolveInfo } from "graphql";
import { AggregateSubtaskArgs } from "./args/AggregateSubtaskArgs";
import { CreateManyAndReturnSubtaskArgs } from "./args/CreateManyAndReturnSubtaskArgs";
import { CreateManySubtaskArgs } from "./args/CreateManySubtaskArgs";
import { CreateOneSubtaskArgs } from "./args/CreateOneSubtaskArgs";
import { DeleteManySubtaskArgs } from "./args/DeleteManySubtaskArgs";
import { DeleteOneSubtaskArgs } from "./args/DeleteOneSubtaskArgs";
import { FindFirstSubtaskArgs } from "./args/FindFirstSubtaskArgs";
import { FindFirstSubtaskOrThrowArgs } from "./args/FindFirstSubtaskOrThrowArgs";
import { FindManySubtaskArgs } from "./args/FindManySubtaskArgs";
import { FindUniqueSubtaskArgs } from "./args/FindUniqueSubtaskArgs";
import { FindUniqueSubtaskOrThrowArgs } from "./args/FindUniqueSubtaskOrThrowArgs";
import { GroupBySubtaskArgs } from "./args/GroupBySubtaskArgs";
import { UpdateManySubtaskArgs } from "./args/UpdateManySubtaskArgs";
import { UpdateOneSubtaskArgs } from "./args/UpdateOneSubtaskArgs";
import { UpsertOneSubtaskArgs } from "./args/UpsertOneSubtaskArgs";
import { Subtask } from "../../../models/Subtask";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSubtask } from "../../outputs/AggregateSubtask";
import { CreateManyAndReturnSubtask } from "../../outputs/CreateManyAndReturnSubtask";
import { SubtaskGroupBy } from "../../outputs/SubtaskGroupBy";
export declare class SubtaskCrudResolver {
    aggregateSubtask(ctx: any, info: GraphQLResolveInfo, args: AggregateSubtaskArgs): Promise<AggregateSubtask>;
    createManySubtask(ctx: any, info: GraphQLResolveInfo, args: CreateManySubtaskArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnSubtask(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnSubtaskArgs): Promise<CreateManyAndReturnSubtask[]>;
    createOneSubtask(ctx: any, info: GraphQLResolveInfo, args: CreateOneSubtaskArgs): Promise<Subtask>;
    deleteManySubtask(ctx: any, info: GraphQLResolveInfo, args: DeleteManySubtaskArgs): Promise<AffectedRowsOutput>;
    deleteOneSubtask(ctx: any, info: GraphQLResolveInfo, args: DeleteOneSubtaskArgs): Promise<Subtask | null>;
    findFirstSubtask(ctx: any, info: GraphQLResolveInfo, args: FindFirstSubtaskArgs): Promise<Subtask | null>;
    findFirstSubtaskOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstSubtaskOrThrowArgs): Promise<Subtask | null>;
    subtasks(ctx: any, info: GraphQLResolveInfo, args: FindManySubtaskArgs): Promise<Subtask[]>;
    subtask(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSubtaskArgs): Promise<Subtask | null>;
    getSubtask(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSubtaskOrThrowArgs): Promise<Subtask | null>;
    groupBySubtask(ctx: any, info: GraphQLResolveInfo, args: GroupBySubtaskArgs): Promise<SubtaskGroupBy[]>;
    updateManySubtask(ctx: any, info: GraphQLResolveInfo, args: UpdateManySubtaskArgs): Promise<AffectedRowsOutput>;
    updateOneSubtask(ctx: any, info: GraphQLResolveInfo, args: UpdateOneSubtaskArgs): Promise<Subtask | null>;
    upsertOneSubtask(ctx: any, info: GraphQLResolveInfo, args: UpsertOneSubtaskArgs): Promise<Subtask>;
}
