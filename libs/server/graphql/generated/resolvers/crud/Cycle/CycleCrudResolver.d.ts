import type { GraphQLResolveInfo } from "graphql";
import { AggregateCycleArgs } from "./args/AggregateCycleArgs";
import { CreateManyAndReturnCycleArgs } from "./args/CreateManyAndReturnCycleArgs";
import { CreateManyCycleArgs } from "./args/CreateManyCycleArgs";
import { CreateOneCycleArgs } from "./args/CreateOneCycleArgs";
import { DeleteManyCycleArgs } from "./args/DeleteManyCycleArgs";
import { DeleteOneCycleArgs } from "./args/DeleteOneCycleArgs";
import { FindFirstCycleArgs } from "./args/FindFirstCycleArgs";
import { FindFirstCycleOrThrowArgs } from "./args/FindFirstCycleOrThrowArgs";
import { FindManyCycleArgs } from "./args/FindManyCycleArgs";
import { FindUniqueCycleArgs } from "./args/FindUniqueCycleArgs";
import { FindUniqueCycleOrThrowArgs } from "./args/FindUniqueCycleOrThrowArgs";
import { GroupByCycleArgs } from "./args/GroupByCycleArgs";
import { UpdateManyCycleArgs } from "./args/UpdateManyCycleArgs";
import { UpdateOneCycleArgs } from "./args/UpdateOneCycleArgs";
import { UpsertOneCycleArgs } from "./args/UpsertOneCycleArgs";
import { Cycle } from "../../../models/Cycle";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCycle } from "../../outputs/AggregateCycle";
import { CreateManyAndReturnCycle } from "../../outputs/CreateManyAndReturnCycle";
import { CycleGroupBy } from "../../outputs/CycleGroupBy";
export declare class CycleCrudResolver {
    aggregateCycle(ctx: any, info: GraphQLResolveInfo, args: AggregateCycleArgs): Promise<AggregateCycle>;
    createManyCycle(ctx: any, info: GraphQLResolveInfo, args: CreateManyCycleArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnCycle(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnCycleArgs): Promise<CreateManyAndReturnCycle[]>;
    createOneCycle(ctx: any, info: GraphQLResolveInfo, args: CreateOneCycleArgs): Promise<Cycle>;
    deleteManyCycle(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCycleArgs): Promise<AffectedRowsOutput>;
    deleteOneCycle(ctx: any, info: GraphQLResolveInfo, args: DeleteOneCycleArgs): Promise<Cycle | null>;
    findFirstCycle(ctx: any, info: GraphQLResolveInfo, args: FindFirstCycleArgs): Promise<Cycle | null>;
    findFirstCycleOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstCycleOrThrowArgs): Promise<Cycle | null>;
    cycles(ctx: any, info: GraphQLResolveInfo, args: FindManyCycleArgs): Promise<Cycle[]>;
    cycle(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCycleArgs): Promise<Cycle | null>;
    getCycle(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCycleOrThrowArgs): Promise<Cycle | null>;
    groupByCycle(ctx: any, info: GraphQLResolveInfo, args: GroupByCycleArgs): Promise<CycleGroupBy[]>;
    updateManyCycle(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCycleArgs): Promise<AffectedRowsOutput>;
    updateOneCycle(ctx: any, info: GraphQLResolveInfo, args: UpdateOneCycleArgs): Promise<Cycle | null>;
    upsertOneCycle(ctx: any, info: GraphQLResolveInfo, args: UpsertOneCycleArgs): Promise<Cycle>;
}
