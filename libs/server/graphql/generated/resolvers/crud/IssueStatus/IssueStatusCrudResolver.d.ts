import type { GraphQLResolveInfo } from "graphql";
import { AggregateIssueStatusArgs } from "./args/AggregateIssueStatusArgs";
import { CreateManyAndReturnIssueStatusArgs } from "./args/CreateManyAndReturnIssueStatusArgs";
import { CreateManyIssueStatusArgs } from "./args/CreateManyIssueStatusArgs";
import { CreateOneIssueStatusArgs } from "./args/CreateOneIssueStatusArgs";
import { DeleteManyIssueStatusArgs } from "./args/DeleteManyIssueStatusArgs";
import { DeleteOneIssueStatusArgs } from "./args/DeleteOneIssueStatusArgs";
import { FindFirstIssueStatusArgs } from "./args/FindFirstIssueStatusArgs";
import { FindFirstIssueStatusOrThrowArgs } from "./args/FindFirstIssueStatusOrThrowArgs";
import { FindManyIssueStatusArgs } from "./args/FindManyIssueStatusArgs";
import { FindUniqueIssueStatusArgs } from "./args/FindUniqueIssueStatusArgs";
import { FindUniqueIssueStatusOrThrowArgs } from "./args/FindUniqueIssueStatusOrThrowArgs";
import { GroupByIssueStatusArgs } from "./args/GroupByIssueStatusArgs";
import { UpdateManyIssueStatusArgs } from "./args/UpdateManyIssueStatusArgs";
import { UpdateOneIssueStatusArgs } from "./args/UpdateOneIssueStatusArgs";
import { UpsertOneIssueStatusArgs } from "./args/UpsertOneIssueStatusArgs";
import { IssueStatus } from "../../../models/IssueStatus";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateIssueStatus } from "../../outputs/AggregateIssueStatus";
import { CreateManyAndReturnIssueStatus } from "../../outputs/CreateManyAndReturnIssueStatus";
import { IssueStatusGroupBy } from "../../outputs/IssueStatusGroupBy";
export declare class IssueStatusCrudResolver {
    aggregateIssueStatus(ctx: any, info: GraphQLResolveInfo, args: AggregateIssueStatusArgs): Promise<AggregateIssueStatus>;
    createManyIssueStatus(ctx: any, info: GraphQLResolveInfo, args: CreateManyIssueStatusArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnIssueStatus(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnIssueStatusArgs): Promise<CreateManyAndReturnIssueStatus[]>;
    createOneIssueStatus(ctx: any, info: GraphQLResolveInfo, args: CreateOneIssueStatusArgs): Promise<IssueStatus>;
    deleteManyIssueStatus(ctx: any, info: GraphQLResolveInfo, args: DeleteManyIssueStatusArgs): Promise<AffectedRowsOutput>;
    deleteOneIssueStatus(ctx: any, info: GraphQLResolveInfo, args: DeleteOneIssueStatusArgs): Promise<IssueStatus | null>;
    findFirstIssueStatus(ctx: any, info: GraphQLResolveInfo, args: FindFirstIssueStatusArgs): Promise<IssueStatus | null>;
    findFirstIssueStatusOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstIssueStatusOrThrowArgs): Promise<IssueStatus | null>;
    issueStatuses(ctx: any, info: GraphQLResolveInfo, args: FindManyIssueStatusArgs): Promise<IssueStatus[]>;
    issueStatus(ctx: any, info: GraphQLResolveInfo, args: FindUniqueIssueStatusArgs): Promise<IssueStatus | null>;
    getIssueStatus(ctx: any, info: GraphQLResolveInfo, args: FindUniqueIssueStatusOrThrowArgs): Promise<IssueStatus | null>;
    groupByIssueStatus(ctx: any, info: GraphQLResolveInfo, args: GroupByIssueStatusArgs): Promise<IssueStatusGroupBy[]>;
    updateManyIssueStatus(ctx: any, info: GraphQLResolveInfo, args: UpdateManyIssueStatusArgs): Promise<AffectedRowsOutput>;
    updateOneIssueStatus(ctx: any, info: GraphQLResolveInfo, args: UpdateOneIssueStatusArgs): Promise<IssueStatus | null>;
    upsertOneIssueStatus(ctx: any, info: GraphQLResolveInfo, args: UpsertOneIssueStatusArgs): Promise<IssueStatus>;
}
