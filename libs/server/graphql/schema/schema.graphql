# Core GraphQL Schema for Task Master Application

scalar DateTime
scalar JSON

# Core Task Management Types

"""
Represents a task in the Task Master system
"""
type Task {
   """
   Unique identifier for the task
   """
   id: ID!

   """
   Human-readable title of the task
   """
   title: String!

   """
   Detailed description of what needs to be accomplished
   """
   description: String!

   """
   Current status of the task
   """
   status: TaskStatus!

   """
   Priority level of the task
   """
   priority: TaskPriority!

   """
   List of task IDs that this task depends on
   """
   dependencies: [ID!]!

   """
   Additional implementation details
   """
   details: String

   """
   Testing strategy for this task
   """
   testStrategy: String

   """
   Complexity score for the task (1-10)
   """
   complexity: Int

   """
   List of subtasks belonging to this task
   """
   subtasks: [Subtask!]!

   """
   Timestamp when the task was created
   """
   createdAt: DateTime!

   """
   Timestamp when the task was last updated
   """
   updatedAt: DateTime!

   """
   Calculated progress percentage (0-100)
   """
   progress: Int!

   """
   Flag indicating if task is ready to work on (no blocking dependencies)
   """
   isReady: Boolean!
}

"""
Represents a subtask within a parent task
"""
type Subtask {
   """
   Unique identifier for the subtask (format: parentId.subtaskId)
   """
   id: ID!

   """
   Human-readable title of the subtask
   """
   title: String!

   """
   Detailed description of the subtask
   """
   description: String!

   """
   Current status of the subtask
   """
   status: TaskStatus!

   """
   List of subtask IDs that this subtask depends on
   """
   dependencies: [String!]!

   """
   Additional implementation details
   """
   details: String

   """
   Testing strategy for this subtask
   """
   testStrategy: String

   """
   Parent task that contains this subtask
   """
   parentTask: Task!

   """
   Timestamp when the subtask was created
   """
   createdAt: DateTime!

   """
   Timestamp when the subtask was last updated
   """
   updatedAt: DateTime!
}

"""
Task status enumeration
"""
enum TaskStatus {
   """
   Task is ready to be worked on
   """
   PENDING

   """
   Task is currently being worked on
   """
   IN_PROGRESS

   """
   Task has been completed
   """
   DONE

   """
   Task has been cancelled and will not be completed
   """
   CANCELLED

   """
   Task has been postponed to a later time
   """
   DEFERRED

   """
   Task is blocked by dependencies or external factors
   """
   BLOCKED
}

"""
Task priority enumeration
"""
enum TaskPriority {
   """
   High priority - should be worked on first
   """
   HIGH

   """
   Medium priority - standard priority level
   """
   MEDIUM

   """
   Low priority - can be worked on when time permits
   """
   LOW
}

"""
Metadata about a collection of tasks
"""
type TaskMetadata {
   """
   Timestamp when the task collection was created
   """
   created: DateTime!

   """
   Timestamp when the task collection was last updated
   """
   updated: DateTime!

   """
   Description of the task collection
   """
   description: String!
}

"""
Represents the complete task data structure
"""
type TasksData {
   """
   The main task collection
   """
   master: TaskCollection!
}

"""
A collection of tasks with metadata
"""
type TaskCollection {
   """
   List of all tasks in the collection
   """
   tasks: [Task!]!

   """
   Metadata about this task collection
   """
   metadata: TaskMetadata!

   """
   Total number of tasks in the collection
   """
   total: Int!

   """
   Number of completed tasks
   """
   completed: Int!

   """
   Number of tasks in progress
   """
   inProgress: Int!

   """
   Number of pending tasks
   """
   pending: Int!

   """
   Overall progress percentage
   """
   progressPercentage: Float!
}

"""
Basic user information (placeholder for future expansion)
"""
type User {
   """
   Unique identifier for the user
   """
   id: ID!

   """
   Display name of the user
   """
   name: String!

   """
   Email address of the user
   """
   email: String!

   """
   Timestamp when the user was created
   """
   createdAt: DateTime!

   """
   Timestamp when the user was last updated
   """
   updatedAt: DateTime!
}

"""
Interface for entities that have timestamps
"""
interface Timestamped {
   """
   Timestamp when the entity was created
   """
   createdAt: DateTime!

   """
   Timestamp when the entity was last updated
   """
   updatedAt: DateTime!
}

"""
Interface for entities that have status
"""
interface Stateful {
   """
   Current status of the entity
   """
   status: String!
}

# Root Query Type
type Query {
   """
   Basic health check endpoint
   """
   health: String!

   """
   Simple hello message
   """
   hello: String!

   """
   Get all tasks with comprehensive filtering, ordering, and pagination
   """
   tasks(
      """
      Filter tasks by various criteria
      """
      filter: TaskFilterInput

      """
      Order tasks by specified field and direction
      """
      orderBy: [TaskOrderByInput!]

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): TaskConnection!

   """
   Get a specific task by ID
   """
   task(id: ID!): Task

   """
   Search tasks with text search and filters
   """
   searchTasks(
      """
      Search query string
      """
      query: String!

      """
      Additional filters to apply
      """
      filter: TaskFilterInput

      """
      Order results
      """
      orderBy: [TaskOrderByInput!]

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): TaskConnection!

   """
   Get tasks ready to work on (no blocking dependencies)
   """
   readyTasks(
      """
      Additional filters to apply
      """
      filter: TaskFilterInput

      """
      Order results
      """
      orderBy: [TaskOrderByInput!]

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): TaskConnection!

   """
   Get CLI command history with filtering and ordering
   """
   cliHistory(
      """
      Filter CLI commands
      """
      filter: CLICommandFilterInput

      """
      Order CLI commands
      """
      orderBy: [CLICommandOrderByInput!]

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): CLICommandConnection!

   """
   Get a specific CLI command result
   """
   cliCommand(id: ID!): CLICommandResult

   """
   Get CLI execution status
   """
   cliStatus: CLIStatus!

   """
   Get sync operations history with filtering and ordering
   """
   syncOperations(
      """
      Filter sync operations
      """
      filter: SyncOperationFilterInput

      """
      Order sync operations
      """
      orderBy: [SyncOperationOrderByInput!]

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): SyncOperationConnection!

   """
   Get a specific sync operation
   """
   syncOperation(id: ID!): SyncOperation

   """
   Get current sync status
   """
   syncStatus: SyncStatus!

   """
   Get sync conflicts with filtering
   """
   syncConflicts(
      """
      Filter sync conflicts
      """
      filter: SyncConflictFilterInput

      """
      Pagination parameters
      """
      pagination: PaginationInput
   ): SyncConflictConnection!

   """
   Get sync health metrics
   """
   syncHealth: SyncHealth!
}

# Root Mutation Type
type Mutation {
   """
   Simple ping for testing
   """
   ping: String!

   """
   Create a new task
   """
   createTask(input: CreateTaskInput!): Task

   """
   Update an existing task
   """
   updateTask(id: ID!, input: UpdateTaskInput!): Task

   """
   Delete a task
   """
   deleteTask(id: ID!): Boolean!

   """
   Execute a CLI command
   """
   executeCLICommand(input: CLICommandInput!): CLICommandResult!

   """
   Kill a running CLI process
   """
   killCLIProcess(processId: String!): Boolean!

   """
   Clear CLI command history
   """
   clearCLIHistory: Boolean!

   """
   Update task status via sync operation
   """
   updateTaskStatus(taskId: ID!, status: TaskStatus!, source: String = "ui"): SyncOperation!

   """
   Create a batch sync operation
   """
   createBatchOperation(
      operations: [BatchOperationInput!]!
      options: BatchOptionsInput
   ): BatchResult!

   """
   Resolve a sync conflict
   """
   resolveSyncConflict(conflictId: ID!, resolution: ConflictResolution!): Boolean!

   """
   Force a manual sync
   """
   forceSync: Boolean!
}

# Supporting Types for CLI and Sync Operations

"""
CLI execution status information
"""
type CLIStatus {
   """
   Number of active CLI processes
   """
   activeProcesses: Int!

   """
   Recent command history
   """
   recentCommands: [CLICommandResult!]!

   """
   System information
   """
   systemInfo: SystemInfo!
}

"""
System information
"""
type SystemInfo {
   """
   Node.js version
   """
   nodeVersion: String!

   """
   Platform information
   """
   platform: String!

   """
   Memory usage statistics
   """
   memoryUsage: MemoryUsage!

   """
   Process uptime in seconds
   """
   uptime: Float!
}

"""
Memory usage statistics
"""
type MemoryUsage {
   """
   Resident set size in bytes
   """
   rss: Float!

   """
   Heap total in bytes
   """
   heapTotal: Float!

   """
   Heap used in bytes
   """
   heapUsed: Float!

   """
   External memory in bytes
   """
   external: Float!
}

"""
Sync status information
"""
type SyncStatus {
   """
   Current sync state
   """
   state: SyncState!

   """
   Number of operations in queue
   """
   queueSize: Int!

   """
   Recent sync operations
   """
   operations: [SyncOperation!]!

   """
   Active conflicts
   """
   conflicts: [SyncConflict!]!

   """
   Optimistic updates count
   """
   optimisticUpdatesCount: Int!
}

"""
Sync health metrics
"""
type SyncHealth {
   """
   Whether sync system is healthy
   """
   healthy: Boolean!

   """
   Current sync state
   """
   syncState: SyncState!

   """
   Number of active operations
   """
   activeOperations: Int!

   """
   Number of queued operations
   """
   queuedOperations: Int!

   """
   Number of unresolved conflicts
   """
   unresolvedConflicts: Int!

   """
   Operation success rate (0-1)
   """
   operationSuccessRate: Float!
}

"""
Sync system state
"""
enum SyncState {
   """
   No active operations
   """
   IDLE

   """
   Operations in progress
   """
   SYNCING

   """
   Error state
   """
   ERROR
}

"""
Batch operation result
"""
type BatchResult {
   """
   Batch operation ID
   """
   batchId: ID!

   """
   Number of operations in batch
   """
   operationsCount: Int!

   """
   Batch options used
   """
   options: JSON

   """
   Timestamp when batch was created
   """
   timestamp: DateTime!
}

# Connection Types for Cursor-based Pagination

"""
Task connection for paginated task queries
"""
type TaskConnection {
   """
   List of task edges
   """
   edges: [TaskEdge!]!

   """
   List of tasks (convenience field)
   """
   nodes: [Task!]!

   """
   Pagination information
   """
   pageInfo: PageInfo!

   """
   Total count of items (if available)
   """
   totalCount: Int
}

"""
Task edge with cursor
"""
type TaskEdge {
   """
   The task node
   """
   node: Task!

   """
   Cursor for this edge
   """
   cursor: String!
}

"""
CLI command connection for paginated CLI queries
"""
type CLICommandConnection {
   """
   List of CLI command edges
   """
   edges: [CLICommandEdge!]!

   """
   List of CLI commands (convenience field)
   """
   nodes: [CLICommandResult!]!

   """
   Pagination information
   """
   pageInfo: PageInfo!

   """
   Total count of items (if available)
   """
   totalCount: Int
}

"""
CLI command edge with cursor
"""
type CLICommandEdge {
   """
   The CLI command node
   """
   node: CLICommandResult!

   """
   Cursor for this edge
   """
   cursor: String!
}

"""
Sync operation connection for paginated sync queries
"""
type SyncOperationConnection {
   """
   List of sync operation edges
   """
   edges: [SyncOperationEdge!]!

   """
   List of sync operations (convenience field)
   """
   nodes: [SyncOperation!]!

   """
   Pagination information
   """
   pageInfo: PageInfo!

   """
   Total count of items (if available)
   """
   totalCount: Int
}

"""
Sync operation edge with cursor
"""
type SyncOperationEdge {
   """
   The sync operation node
   """
   node: SyncOperation!

   """
   Cursor for this edge
   """
   cursor: String!
}

"""
Sync conflict connection for paginated conflict queries
"""
type SyncConflictConnection {
   """
   List of sync conflict edges
   """
   edges: [SyncConflictEdge!]!

   """
   List of sync conflicts (convenience field)
   """
   nodes: [SyncConflict!]!

   """
   Pagination information
   """
   pageInfo: PageInfo!

   """
   Total count of items (if available)
   """
   totalCount: Int
}

"""
Sync conflict edge with cursor
"""
type SyncConflictEdge {
   """
   The sync conflict node
   """
   node: SyncConflict!

   """
   Cursor for this edge
   """
   cursor: String!
}

"""
Page information for cursor-based pagination
"""
type PageInfo {
   """
   Whether there are more items when paginating forward
   """
   hasNextPage: Boolean!

   """
   Whether there are more items when paginating backward
   """
   hasPreviousPage: Boolean!

   """
   Cursor pointing to the first edge
   """
   startCursor: String

   """
   Cursor pointing to the last edge
   """
   endCursor: String
}

# CLI Command and Sync Operation Types

"""
Represents the result of a CLI command execution
"""
type CLICommandResult {
   """
   Unique identifier for the command execution
   """
   id: ID!

   """
   The command that was executed
   """
   command: String!

   """
   Command line arguments
   """
   args: [String!]!

   """
   Standard output from the command
   """
   stdout: String

   """
   Standard error output from the command
   """
   stderr: String

   """
   Exit code returned by the command
   """
   exitCode: Int!

   """
   Execution duration in milliseconds
   """
   duration: Int!

   """
   Timestamp when the command was executed
   """
   timestamp: DateTime!

   """
   Current status of the command execution
   """
   status: CLICommandStatus!

   """
   Related task ID if command was task-related
   """
   taskId: ID

   """
   Parsed output data if available
   """
   parsedOutput: JSON

   """
   Error information if command failed
   """
   error: CLIError
}

"""
CLI command execution status
"""
enum CLICommandStatus {
   """
   Command is queued for execution
   """
   QUEUED

   """
   Command is currently running
   """
   RUNNING

   """
   Command completed successfully
   """
   COMPLETED

   """
   Command failed with error
   """
   FAILED

   """
   Command was cancelled
   """
   CANCELLED

   """
   Command execution timed out
   """
   TIMEOUT
}

"""
Represents a synchronization operation
"""
type SyncOperation {
   """
   Unique identifier for the sync operation
   """
   id: ID!

   """
   Type of synchronization operation
   """
   type: SyncOperationType!

   """
   Current status of the sync operation
   """
   status: SyncOperationStatus!

   """
   Timestamp when the operation was created
   """
   timestamp: DateTime!

   """
   Source of the sync operation (ui, cli, etc.)
   """
   source: String!

   """
   List of task IDs affected by this operation
   """
   taskIds: [ID!]!

   """
   Operation metadata and context
   """
   metadata: JSON

   """
   Number of retry attempts
   """
   retryCount: Int!

   """
   Error information if operation failed
   """
   error: SyncError

   """
   Operation completion timestamp
   """
   completedAt: DateTime
}

"""
Types of synchronization operations
"""
enum SyncOperationType {
   """
   Sync task status changes
   """
   TASK_UPDATE

   """
   Create new tasks
   """
   TASK_CREATE

   """
   Delete tasks
   """
   TASK_DELETE

   """
   Update task status specifically
   """
   STATUS_CHANGE

   """
   Batch update multiple items
   """
   BATCH_UPDATE

   """
   File system synchronization
   """
   FILE_SYNC

   """
   Full system synchronization
   """
   FULL_SYNC
}

"""
Sync operation status
"""
enum SyncOperationStatus {
   """
   Operation is pending execution
   """
   PENDING

   """
   Operation is currently executing
   """
   EXECUTING

   """
   Operation completed successfully
   """
   COMPLETED

   """
   Operation failed with error
   """
   FAILED

   """
   Operation was cancelled
   """
   CANCELLED
}

"""
Represents a sync conflict that needs resolution
"""
type SyncConflict {
   """
   Unique identifier for the conflict
   """
   id: ID!

   """
   Type of sync operation that caused the conflict
   """
   operationType: SyncOperationType!

   """
   Task ID involved in the conflict
   """
   taskId: ID!

   """
   UI version of the data
   """
   uiVersion: JSON!

   """
   CLI/file version of the data
   """
   cliVersion: JSON!

   """
   Timestamp when conflict was detected
   """
   timestamp: DateTime!

   """
   Whether the conflict has been resolved
   """
   resolved: Boolean!

   """
   Resolution strategy used if resolved
   """
   resolution: ConflictResolution

   """
   Timestamp when conflict was resolved
   """
   resolvedAt: DateTime
}

"""
Conflict resolution strategies
"""
enum ConflictResolution {
   """
   Use the UI version
   """
   UI_WINS

   """
   Use the CLI version
   """
   CLI_WINS

   """
   Use the most recent version
   """
   LAST_WRITE_WINS

   """
   Attempt to merge both versions
   """
   MERGE

   """
   Require manual user resolution
   """
   USER_RESOLVE
}

"""
CLI command error information
"""
type CLIError {
   """
   Error code
   """
   code: String!

   """
   Human-readable error message
   """
   message: String!

   """
   Additional error details
   """
   details: JSON

   """
   Stack trace if available
   """
   stack: String
}

"""
Sync operation error information
"""
type SyncError {
   """
   Error code
   """
   code: String!

   """
   Human-readable error message
   """
   message: String!

   """
   Additional error details
   """
   details: JSON

   """
   Related operation that caused the error
   """
   operationId: ID
}

# Comprehensive Input Types and Filters

# Helper Input Types
"""
Date range input for filtering by date ranges
"""
input DateRangeInput {
   """
   Start date (inclusive)
   """
   startDate: DateTime

   """
   End date (inclusive)
   """
   endDate: DateTime
}

"""
Pagination input with cursor-based pagination support
"""
input PaginationInput {
   """
   Return first N records after cursor
   """
   first: Int

   """
   Cursor for forward pagination
   """
   after: String

   """
   Return last N records before cursor
   """
   last: Int

   """
   Cursor for backward pagination
   """
   before: String

   """
   Maximum number of records (safety limit)
   """
   limit: Int = 100
}

# Task Filtering and Ordering
"""
Comprehensive task filtering options
"""
input TaskFilterInput {
   """
   Filter by task status
   """
   status: [TaskStatus!]

   """
   Filter by task priority
   """
   priority: [TaskPriority!]

   """
   Search in title and description (case-insensitive)
   """
   search: String

   """
   Filter by creation date range
   """
   createdAt: DateRangeInput

   """
   Filter by last update date range
   """
   updatedAt: DateRangeInput

   """
   Filter tasks that have no dependencies
   """
   hasNoDependencies: Boolean

   """
   Filter tasks that depend on specific task IDs
   """
   dependsOn: [ID!]

   """
   Filter tasks that have subtasks
   """
   hasSubtasks: Boolean

   """
   Filter by complexity score range
   """
   complexityRange: IntRangeInput

   """
   Filter by progress percentage range
   """
   progressRange: IntRangeInput

   """
   Filter tasks ready to work on (no blocking dependencies)
   """
   isReady: Boolean
}

"""
Task ordering options
"""
input TaskOrderByInput {
   """
   Field to order by
   """
   field: TaskOrderField!

   """
   Sort direction
   """
   direction: OrderDirection!
}

"""
Task order fields
"""
enum TaskOrderField {
   ID
   TITLE
   STATUS
   PRIORITY
   CREATED_AT
   UPDATED_AT
   COMPLEXITY
   PROGRESS
}

"""
Sort direction
"""
enum OrderDirection {
   ASC
   DESC
}

"""
Integer range input for numeric filtering
"""
input IntRangeInput {
   """
   Minimum value (inclusive)
   """
   min: Int

   """
   Maximum value (inclusive)
   """
   max: Int
}

# CLI Command Filtering
"""
CLI command filtering options
"""
input CLICommandFilterInput {
   """
   Filter by command execution status
   """
   status: [CLICommandStatus!]

   """
   Search in command text
   """
   commandSearch: String

   """
   Filter by execution date range
   """
   executedAt: DateRangeInput

   """
   Filter by execution duration range (milliseconds)
   """
   durationRange: IntRangeInput

   """
   Filter by exit code
   """
   exitCode: [Int!]

   """
   Filter commands related to specific task
   """
   taskId: ID

   """
   Filter by success/failure
   """
   successful: Boolean
}

"""
CLI command ordering options
"""
input CLICommandOrderByInput {
   """
   Field to order by
   """
   field: CLICommandOrderField!

   """
   Sort direction
   """
   direction: OrderDirection!
}

"""
CLI command order fields
"""
enum CLICommandOrderField {
   TIMESTAMP
   DURATION
   COMMAND
   EXIT_CODE
   STATUS
}

# Sync Operation Filtering
"""
Sync operation filtering options
"""
input SyncOperationFilterInput {
   """
   Filter by operation type
   """
   type: [SyncOperationType!]

   """
   Filter by operation status
   """
   status: [SyncOperationStatus!]

   """
   Filter by creation date range
   """
   createdAt: DateRangeInput

   """
   Filter by completion date range
   """
   completedAt: DateRangeInput

   """
   Filter by operation source
   """
   source: [String!]

   """
   Filter operations affecting specific tasks
   """
   taskIds: [ID!]

   """
   Filter by retry count range
   """
   retryCountRange: IntRangeInput

   """
   Filter operations with/without errors
   """
   hasError: Boolean
}

"""
Sync operation ordering options
"""
input SyncOperationOrderByInput {
   """
   Field to order by
   """
   field: SyncOperationOrderField!

   """
   Sort direction
   """
   direction: OrderDirection!
}

"""
Sync operation order fields
"""
enum SyncOperationOrderField {
   TIMESTAMP
   COMPLETED_AT
   TYPE
   STATUS
   RETRY_COUNT
   SOURCE
}

# Conflict Filtering
"""
Sync conflict filtering options
"""
input SyncConflictFilterInput {
   """
   Filter by conflict resolution status
   """
   resolved: Boolean

   """
   Filter by operation type that caused conflict
   """
   operationType: [SyncOperationType!]

   """
   Filter by task involved in conflict
   """
   taskId: ID

   """
   Filter by conflict detection date range
   """
   detectedAt: DateRangeInput

   """
   Filter by resolution date range
   """
   resolvedAt: DateRangeInput

   """
   Filter by resolution strategy used
   """
   resolution: [ConflictResolution!]
}

# Task Input Types
input CreateTaskInput {
   title: String!
   description: String!
   priority: TaskPriority = MEDIUM
   dependencies: [ID!] = []
   details: String
   testStrategy: String
}

input UpdateTaskInput {
   title: String
   description: String
   status: TaskStatus
   priority: TaskPriority
   dependencies: [ID!]
   details: String
   testStrategy: String
}

# CLI and Sync Operation Input Types
"""
Input for executing CLI commands
"""
input CLICommandInput {
   """
   Command to execute
   """
   command: String!

   """
   Command arguments
   """
   args: [String!] = []

   """
   Execution timeout in milliseconds
   """
   timeout: Int

   """
   Whether to parse command output
   """
   parseOutput: Boolean = true

   """
   Whether to capture real-time progress
   """
   captureProgress: Boolean = false
}

"""
Input for batch sync operations
"""
input BatchOperationInput {
   """
   Type of operation
   """
   type: SyncOperationType!

   """
   Operation data
   """
   data: JSON!

   """
   Target task ID if applicable
   """
   taskId: ID
}

"""
Options for batch operations
"""
input BatchOptionsInput {
   """
   Whether to execute operations in parallel
   """
   parallel: Boolean = false

   """
   Maximum retry attempts
   """
   maxRetries: Int = 3

   """
   Whether to continue on error
   """
   continueOnError: Boolean = true
}
