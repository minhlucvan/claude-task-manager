# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CursorPaginationInput {
  after: String
  before: String
  first: Int = 20
  last: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  readyTasks(limit: Float, offset: Float): [Task!]!
  searchTasks(options: TaskOptions, searchText: String!): [Task!]!
  task(id: Int!, options: TaskOptions): Task
  taskStats: TaskStats!
  tasks(filters: TaskFilters, options: TaskOptions, orderBy: TaskOrderBy): [Task!]!
  tasksConnection(filters: TaskFilters, orderBy: TaskOrderBy, pagination: CursorPaginationInput): TaskConnection!
}

type Subtask {
  createdAt: DateTimeISO!
  dependencies: [String!]
  description: String!
  details: String
  fullId: String!
  id: ID!
  status: TaskStatus!
  testStrategy: String
  title: String!
  updatedAt: DateTimeISO!
}

type Task {
  complexity: Int
  createdAt: DateTimeISO!
  dependencies: [Int!]
  description: String!
  details: String
  id: ID!
  priority: TaskPriority!
  status: TaskStatus!
  subtasks: [Subtask!]
  testStrategy: String
  title: String!
  updatedAt: DateTimeISO!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TaskEdge {
  cursor: String!
  node: Task!
}

input TaskFilters {
  hasDependencies: Boolean
  hasSubtasks: Boolean
  ids: [Int!]
  priority: [TaskPriority!]
  search: String
  status: [TaskStatus!]
}

input TaskOptions {
  includeSubtasks: Boolean = true
  limit: Int
  offset: Int
}

input TaskOrderBy {
  direction: String!
  field: String!
}

"""Task priority levels"""
enum TaskPriority {
  HIGH
  LOW
  MEDIUM
}

type TaskPriorityCount {
  high: Int
  low: Int
  medium: Int
}

type TaskStats {
  tasksByPriority: TaskPriorityCount
  tasksByStatus: TaskStatusCount
  totalSubtasks: Int!
  totalTasks: Int!
}

"""Task status values"""
enum TaskStatus {
  BLOCKED
  CANCELLED
  DEFERRED
  DONE
  IN_PROGRESS
  PENDING
}

type TaskStatusCount {
  blocked: Int
  cancelled: Int
  deferred: Int
  done: Int
  inProgress: Int
  pending: Int
}