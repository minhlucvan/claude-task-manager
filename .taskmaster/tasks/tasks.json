{
   "master": {
      "tasks": [
         {
            "id": 28,
            "title": "Create Individual Mode Layout System",
            "description": "Implement core layout structure for individual project management mode with reusable components",
            "details": "Create `/app/indie/layout.tsx` using Next.js 14+ app router pattern. Implement `IndieLayout` component in `/components/layout/indie-layout.tsx` that wraps content with existing `SidebarProvider` and maintains consistent styling with team mode. Use TypeScript with strict mode and follow existing component patterns. Implement individual mode project context using React Context API with proper TypeScript interfaces. Ensure responsive design using Tailwind CSS classes matching existing design system.",
            "testStrategy": "Unit tests for IndieLayout component, integration tests for route rendering, visual regression tests for layout consistency across devices",
            "priority": "high",
            "dependencies": [],
            "status": "done",
            "subtasks": [
               {
                  "id": 1,
                  "title": "Create Next.js app router layout structure",
                  "description": "Implement `/app/indie/layout.tsx` using Next.js 14+ app router pattern with proper TypeScript configuration",
                  "dependencies": [],
                  "details": "Create the main layout file at `/app/indie/layout.tsx` following Next.js 14+ app router conventions. Set up proper TypeScript interfaces for layout props, implement metadata configuration, and ensure proper component structure with children prop handling. Follow existing app router patterns from team mode layouts.",
                  "status": "done",
                  "testStrategy": "Unit tests for layout component rendering, route configuration testing, TypeScript compilation verification"
               },
               {
                  "id": 2,
                  "title": "Build IndieLayout wrapper component",
                  "description": "Create reusable `IndieLayout` component in `/components/layout/indie-layout.tsx` with SidebarProvider integration",
                  "dependencies": ["28.1"],
                  "details": "Implement the main IndieLayout component that wraps content with existing SidebarProvider. Ensure consistent styling with team mode using shared design tokens and Tailwind CSS classes. Include proper TypeScript interfaces and props handling for children and layout configuration.",
                  "status": "done",
                  "testStrategy": "Component testing for layout rendering, SidebarProvider integration testing, responsive design testing across devices"
               },
               {
                  "id": 3,
                  "title": "Implement individual mode project context",
                  "description": "Create React Context API setup for individual project management with TypeScript interfaces",
                  "dependencies": ["28.2"],
                  "details": "Build React Context using createContext and useContext hooks with proper TypeScript interfaces for individual project state management. Include project selection, current project state, and project switching functionality. Implement context provider component with state management and proper error boundaries.",
                  "status": "done",
                  "testStrategy": "Context provider testing, state management testing, TypeScript interface validation, error boundary testing"
               },
               {
                  "id": 4,
                  "title": "Ensure responsive design consistency",
                  "description": "Apply responsive Tailwind CSS classes matching existing design system across all layout components",
                  "dependencies": ["28.2", "28.3"],
                  "details": "Implement responsive design using Tailwind CSS breakpoints and utility classes. Ensure layout adapts properly on mobile, tablet, and desktop screens. Apply consistent spacing, typography, and component sizing that matches the existing team mode design system.",
                  "status": "done",
                  "testStrategy": "Visual regression testing for layout consistency, responsive design testing across multiple device sizes, design system compliance verification"
               },
               {
                  "id": 5,
                  "title": "Integrate layout components and test end-to-end flow",
                  "description": "Connect all layout components together and verify complete individual mode layout functionality",
                  "dependencies": ["28.1", "28.2", "28.3", "28.4"],
                  "details": "Integrate the Next.js layout file with IndieLayout component and project context. Test complete user flow from route access to layout rendering. Ensure proper component composition, context propagation, and layout state management. Verify integration with existing SidebarProvider and design system.",
                  "status": "done",
                  "testStrategy": "End-to-end integration testing, user flow testing, layout state persistence testing, cross-browser compatibility testing"
               }
            ]
         },
         {
            "id": 29,
            "title": "Build Individual Mode Sidebar",
            "description": "Create simplified sidebar navigation for individual project focus with mode switching capability",
            "details": "Create `IndieSidebar` component in `/components/layout/sidebar/indie-sidebar.tsx` using existing sidebar UI patterns. Build navigation data structure in `/mock-data/indie-sidebar-nav.ts` with Dashboard, Tasks, and Settings sections. Implement mode switcher component using Radix UI Select or similar for toggling between team and individual modes. Reuse existing `NavItem`, `NavSection` components and Lucide React icons. Store mode preference in localStorage with proper TypeScript typing.",
            "testStrategy": "Component testing for sidebar rendering, interaction testing for mode switcher, localStorage persistence testing, accessibility testing for navigation",
            "priority": "high",
            "dependencies": [28],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 30,
            "title": "Implement Individual Mode Routes",
            "description": "Set up complete route structure for individual task management with proper page components",
            "details": "Create Next.js 14 app router pages: `/app/indie/page.tsx` for dashboard, `/app/indie/tasks/page.tsx` reusing existing AllIssues component, `/app/indie/tasks/[taskId]/page.tsx` for task details with dynamic routing, and `/app/indie/settings/page.tsx` for individual settings. Implement proper metadata, loading states, and error boundaries. Use existing components where possible and ensure proper TypeScript interfaces for route params.",
            "testStrategy": "Route testing with Next.js testing utilities, page load performance testing, error boundary testing, SEO metadata validation",
            "priority": "medium",
            "dependencies": [29],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 31,
            "title": "Create Unified Task/Subtask Component with Hierarchy",
            "description": "Build flexible TaskItem component supporting unlimited hierarchical nesting with visual hierarchy indicators",
            "details": "Create `TaskItem` component in `/components/common/tasks/task-item.tsx` with recursive rendering capability. Extend existing Issue interface to include `parentId?: string`, `subtasks: Task[]`, and `depth: number` properties. Implement visual hierarchy with CSS-in-JS or Tailwind classes for indentation (depth * 1rem), nested borders, and hierarchical icons. Use React.memo for performance optimization and implement expand/collapse state management with useState or Zustand. Support drag-and-drop reordering with @dnd-kit/core library.",
            "testStrategy": "Component testing for hierarchy rendering, performance testing for large task trees, accessibility testing for screen readers, drag-and-drop interaction testing",
            "priority": "high",
            "dependencies": [30],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 32,
            "title": "Adapt Existing Issue System for Hierarchical Tasks",
            "description": "Modify existing issue components to work with parent-child task relationships and hierarchy-aware filtering",
            "details": "Update `AllIssues` component to use new `TaskItem` for hierarchical rendering. Modify existing filtering logic in `/components/common/issues/` to handle parent-child relationships with proper type guards. Adapt `GroupIssues` component to maintain hierarchy within groups. Update search functionality to search across nested tasks and highlight matches in hierarchy. Ensure existing Zustand stores work with hierarchical data structures.",
            "testStrategy": "Integration testing for filter functionality, search performance testing across hierarchy levels, regression testing for existing issue features",
            "priority": "medium",
            "dependencies": [31],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 33,
            "title": "Enhanced Task Detail View with Subtask Management",
            "description": "Create comprehensive task detail page with inline subtask creation and management capabilities",
            "details": "Build task detail page reusing existing issue detail components. Implement inline subtask creation with form validation using react-hook-form and zod schemas. Add subtask reordering with @dnd-kit/sortable, maintaining parent-child relationships. Integrate existing `IssueContextMenu` for both tasks and subtasks with hierarchy-aware actions. Implement breadcrumb navigation using Next.js Link components showing full task hierarchy path.",
            "testStrategy": "End-to-end testing for subtask CRUD operations, form validation testing, breadcrumb navigation testing, context menu functionality testing",
            "priority": "medium",
            "dependencies": [32],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 34,
            "title": "Individual Mode Dashboard with Hierarchical View",
            "description": "Create project-focused dashboard displaying collapsible task tree with progress tracking",
            "details": "Build dashboard component with collapsible task tree using Radix UI Collapsible or similar. Implement hierarchy-aware progress calculations including subtask completion percentages. Add quick action buttons for creating tasks and subtasks with modal dialogs using Radix UI Dialog. Display project statistics with charts using Recharts library. Use existing design tokens and maintain consistent styling with team mode dashboard.",
            "testStrategy": "Dashboard rendering testing, progress calculation accuracy testing, quick action modal testing, chart rendering and data accuracy testing",
            "priority": "medium",
            "dependencies": [33],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 35,
            "title": "Update Application Entry Point for Mode Detection",
            "description": "Modify main routing logic to support individual mode detection and seamless mode switching",
            "details": "Update `app/page.tsx` and `getDefaultRoute()` function to detect individual mode preference from localStorage or user settings. Implement route redirection logic for mode switching using Next.js redirect() or router.push(). Update existing navigation components to include mode context awareness. Ensure proper TypeScript typing for mode detection and maintain backward compatibility with existing team mode functionality.",
            "testStrategy": "Route redirection testing, mode persistence testing, backward compatibility testing, navigation context testing",
            "priority": "medium",
            "dependencies": [34],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 36,
            "title": "Individual Mode Data Context with Hierarchy Support",
            "description": "Adapt existing data management for hierarchical task operations while maintaining GraphQL and CLI compatibility",
            "details": "Create individual project context wrapper using React Context API with TypeScript interfaces. Modify existing Zustand stores to handle hierarchical task data with proper parent-child relationship management. Update task CRUD operations to maintain hierarchy integrity with optimistic updates. Ensure existing GraphQL schema supports task hierarchy with proper resolver updates. Maintain compatibility with Task Master CLI integration by preserving existing data structures and API contracts.",
            "testStrategy": "Context provider testing, Zustand store testing for hierarchy operations, GraphQL integration testing, CLI compatibility testing, data consistency testing",
            "priority": "high",
            "dependencies": [35],
            "status": "pending",
            "subtasks": []
         },
         {
            "id": 37,
            "title": "Performance Optimization and Final Integration",
            "description": "Optimize hierarchical task rendering performance and ensure seamless integration with existing systems",
            "details": "Implement React.memo, useMemo, and useCallback for hierarchical task components to prevent unnecessary re-renders. Add virtualization for large task lists using @tanstack/react-virtual. Implement lazy loading for deep task hierarchies with React.lazy and Suspense. Add performance monitoring with Next.js built-in metrics and ensure proper bundle splitting. Conduct comprehensive testing across all individual mode features and ensure backward compatibility with team mode.",
            "testStrategy": "Performance benchmarking for large task hierarchies, memory usage testing, bundle size analysis, cross-mode compatibility testing, comprehensive end-to-end testing",
            "priority": "low",
            "dependencies": [36],
            "status": "pending",
            "subtasks": []
         }
      ],
      "metadata": {
         "created": "2025-07-26T00:47:21.699Z",
         "updated": "2025-07-26T18:00:31.600Z",
         "description": "Tasks for master context"
      }
   }
}
